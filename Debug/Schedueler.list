
Schedueler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002b5c  08002b5c  00003b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b94  08002b94  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002b94  08002b94  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002b94  08002b94  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b94  08002b94  00003b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b98  08002b98  00003b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002b9c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          000003b4  2000000c  2000000c  0000400c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c0  200003c0  0000400c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cad5  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e45  00000000  00000000  00010b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  00012958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a2  00000000  00000000  000134a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cb8a  00000000  00000000  00013d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eea0  00000000  00000000  000308cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab447  00000000  00000000  0003f76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eabb3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ea8  00000000  00000000  000eabf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000edaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b44 	.word	0x08002b44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b44 	.word	0x08002b44

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	TaskSelection taskList[] = {blinkLed1, blinkLed2};
 80001ce:	4a11      	ldr	r2, [pc, #68]	@ (8000214 <main+0x4c>)
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80001d6:	e883 0003 	stmia.w	r3, {r0, r1}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fb33 	bl	8000844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f81b 	bl	8000218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f91b 	bl	800041c <MX_GPIO_Init>
  MX_I2C1_Init();
 80001e6:	f000 f879 	bl	80002dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80001ea:	f000 f8b7 	bl	800035c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80001ee:	f000 f8f3 	bl	80003d8 <MX_USB_PCD_Init>
  /* USER CODE BEGIN 2 */

  uint8_t currentTask = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  taskList[currentTask]();
 80001f6:	7bfb      	ldrb	r3, [r7, #15]
 80001f8:	009b      	lsls	r3, r3, #2
 80001fa:	3310      	adds	r3, #16
 80001fc:	443b      	add	r3, r7
 80001fe:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000202:	4798      	blx	r3
	  currentTask = (currentTask + 1) % No_TASKS;
 8000204:	7bfb      	ldrb	r3, [r7, #15]
 8000206:	3301      	adds	r3, #1
 8000208:	b2db      	uxtb	r3, r3
 800020a:	f003 0301 	and.w	r3, r3, #1
 800020e:	73fb      	strb	r3, [r7, #15]
	  taskList[currentTask]();
 8000210:	bf00      	nop
 8000212:	e7f0      	b.n	80001f6 <main+0x2e>
 8000214:	08002b5c 	.word	0x08002b5c

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b09e      	sub	sp, #120	@ 0x78
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000222:	2228      	movs	r2, #40	@ 0x28
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 fc60 	bl	8002aec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800023c:	463b      	mov	r3, r7
 800023e:	223c      	movs	r2, #60	@ 0x3c
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f002 fc52 	bl	8002aec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000248:	2303      	movs	r3, #3
 800024a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800024c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000250:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000252:	2300      	movs	r3, #0
 8000254:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000256:	2301      	movs	r3, #1
 8000258:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800025a:	2310      	movs	r3, #16
 800025c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000262:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000266:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000268:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800026c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000272:	4618      	mov	r0, r3
 8000274:	f000 ffd8 	bl	8001228 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800027e:	f000 f981 	bl	8000584 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000292:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000298:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800029c:	2101      	movs	r1, #1
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 ffd0 	bl	8002244 <HAL_RCC_ClockConfig>
 80002a4:	4603      	mov	r3, r0
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80002aa:	f000 f96b 	bl	8000584 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 80002ae:	4b0a      	ldr	r3, [pc, #40]	@ (80002d8 <SystemClock_Config+0xc0>)
 80002b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002b2:	2300      	movs	r3, #0
 80002b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80002b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80002ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f002 f982 	bl	80025c8 <HAL_RCCEx_PeriphCLKConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80002ca:	f000 f95b 	bl	8000584 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3778      	adds	r7, #120	@ 0x78
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	00020020 	.word	0x00020020

080002dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <MX_I2C1_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <MX_I2C1_Init+0x7c>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f2:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000304:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_I2C1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000316:	480e      	ldr	r0, [pc, #56]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000318:	f000 fd8c 	bl	8000e34 <HAL_I2C_Init>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000322:	f000 f92f 	bl	8000584 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000326:	2100      	movs	r1, #0
 8000328:	4809      	ldr	r0, [pc, #36]	@ (8000350 <MX_I2C1_Init+0x74>)
 800032a:	f000 fe1e 	bl	8000f6a <HAL_I2CEx_ConfigAnalogFilter>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 f926 	bl	8000584 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000338:	2100      	movs	r1, #0
 800033a:	4805      	ldr	r0, [pc, #20]	@ (8000350 <MX_I2C1_Init+0x74>)
 800033c:	f000 fe60 	bl	8001000 <HAL_I2CEx_ConfigDigitalFilter>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f91d 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000028 	.word	0x20000028
 8000354:	40005400 	.word	0x40005400
 8000358:	2000090e 	.word	0x2000090e

0800035c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000362:	4a1c      	ldr	r2, [pc, #112]	@ (80003d4 <MX_SPI1_Init+0x78>)
 8000364:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000366:	4b1a      	ldr	r3, [pc, #104]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000368:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800036c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800036e:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000374:	4b16      	ldr	r3, [pc, #88]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000376:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800037a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800037c:	4b14      	ldr	r3, [pc, #80]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800037e:	2200      	movs	r2, #0
 8000380:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000382:	4b13      	ldr	r3, [pc, #76]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000384:	2200      	movs	r2, #0
 8000386:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000388:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800038a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800038e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000392:	2208      	movs	r2, #8
 8000394:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_SPI1_Init+0x74>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <MX_SPI1_Init+0x74>)
 800039e:	2200      	movs	r2, #0
 80003a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003a2:	4b0b      	ldr	r3, [pc, #44]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003a8:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003aa:	2207      	movs	r2, #7
 80003ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003ae:	4b08      	ldr	r3, [pc, #32]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80003b4:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003b6:	2208      	movs	r2, #8
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ba:	4805      	ldr	r0, [pc, #20]	@ (80003d0 <MX_SPI1_Init+0x74>)
 80003bc:	f002 fab2 	bl	8002924 <HAL_SPI_Init>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f8dd 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	2000007c 	.word	0x2000007c
 80003d4:	40013000 	.word	0x40013000

080003d8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 80003dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003de:	4a0e      	ldr	r2, [pc, #56]	@ (8000418 <MX_USB_PCD_Init+0x40>)
 80003e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80003e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003e4:	2208      	movs	r2, #8
 80003e6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80003e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003ea:	2202      	movs	r2, #2
 80003ec:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80003ee:	4b09      	ldr	r3, [pc, #36]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003f0:	2202      	movs	r2, #2
 80003f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80003f4:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80003fa:	4b06      	ldr	r3, [pc, #24]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000400:	4804      	ldr	r0, [pc, #16]	@ (8000414 <MX_USB_PCD_Init+0x3c>)
 8000402:	f000 fe49 	bl	8001098 <HAL_PCD_Init>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800040c:	f000 f8ba 	bl	8000584 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}
 8000414:	200000e0 	.word	0x200000e0
 8000418:	40005c00 	.word	0x40005c00

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	@ 0x28
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0314 	add.w	r3, r7, #20
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
 8000430:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000432:	4b37      	ldr	r3, [pc, #220]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a36      	ldr	r2, [pc, #216]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000438:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b34      	ldr	r3, [pc, #208]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000446:	613b      	str	r3, [r7, #16]
 8000448:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044a:	4b31      	ldr	r3, [pc, #196]	@ (8000510 <MX_GPIO_Init+0xf4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	4a30      	ldr	r2, [pc, #192]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000450:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000454:	6153      	str	r3, [r2, #20]
 8000456:	4b2e      	ldr	r3, [pc, #184]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000462:	4b2b      	ldr	r3, [pc, #172]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	4a2a      	ldr	r2, [pc, #168]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000468:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800046c:	6153      	str	r3, [r2, #20]
 800046e:	4b28      	ldr	r3, [pc, #160]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000476:	60bb      	str	r3, [r7, #8]
 8000478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047a:	4b25      	ldr	r3, [pc, #148]	@ (8000510 <MX_GPIO_Init+0xf4>)
 800047c:	695b      	ldr	r3, [r3, #20]
 800047e:	4a24      	ldr	r2, [pc, #144]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000484:	6153      	str	r3, [r2, #20]
 8000486:	4b22      	ldr	r3, [pc, #136]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000488:	695b      	ldr	r3, [r3, #20]
 800048a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800048e:	607b      	str	r3, [r7, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000492:	4b1f      	ldr	r3, [pc, #124]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a1e      	ldr	r2, [pc, #120]	@ (8000510 <MX_GPIO_Init+0xf4>)
 8000498:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800049c:	6153      	str	r3, [r2, #20]
 800049e:	4b1c      	ldr	r3, [pc, #112]	@ (8000510 <MX_GPIO_Init+0xf4>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80004a6:	603b      	str	r3, [r7, #0]
 80004a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004aa:	2200      	movs	r2, #0
 80004ac:	f64f 7108 	movw	r1, #65288	@ 0xff08
 80004b0:	4818      	ldr	r0, [pc, #96]	@ (8000514 <MX_GPIO_Init+0xf8>)
 80004b2:	f000 fc8d 	bl	8000dd0 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 80004b6:	2337      	movs	r3, #55	@ 0x37
 80004b8:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004ba:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80004be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	4619      	mov	r1, r3
 80004ca:	4812      	ldr	r0, [pc, #72]	@ (8000514 <MX_GPIO_Init+0xf8>)
 80004cc:	f000 fb06 	bl	8000adc <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 80004d0:	f64f 7308 	movw	r3, #65288	@ 0xff08
 80004d4:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d6:	2301      	movs	r3, #1
 80004d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004da:	2300      	movs	r3, #0
 80004dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	2300      	movs	r3, #0
 80004e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e2:	f107 0314 	add.w	r3, r7, #20
 80004e6:	4619      	mov	r1, r3
 80004e8:	480a      	ldr	r0, [pc, #40]	@ (8000514 <MX_GPIO_Init+0xf8>)
 80004ea:	f000 faf7 	bl	8000adc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ee:	2301      	movs	r3, #1
 80004f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fa:	f107 0314 	add.w	r3, r7, #20
 80004fe:	4619      	mov	r1, r3
 8000500:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000504:	f000 faea 	bl	8000adc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000508:	bf00      	nop
 800050a:	3728      	adds	r7, #40	@ 0x28
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40021000 	.word	0x40021000
 8000514:	48001000 	.word	0x48001000

08000518 <blinkLed1>:

/* USER CODE BEGIN 4 */

void blinkLed1(void){
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	static uint32_t lastTick = 0;

	if(HAL_GetTick()-lastTick >= 200){
 800051c:	f000 f9ec 	bl	80008f8 <HAL_GetTick>
 8000520:	4602      	mov	r2, r0
 8000522:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <blinkLed1+0x2c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	1ad3      	subs	r3, r2, r3
 8000528:	2bc7      	cmp	r3, #199	@ 0xc7
 800052a:	d909      	bls.n	8000540 <blinkLed1+0x28>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 800052c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000530:	4805      	ldr	r0, [pc, #20]	@ (8000548 <blinkLed1+0x30>)
 8000532:	f000 fc65 	bl	8000e00 <HAL_GPIO_TogglePin>
		lastTick = HAL_GetTick();
 8000536:	f000 f9df 	bl	80008f8 <HAL_GetTick>
 800053a:	4603      	mov	r3, r0
 800053c:	4a01      	ldr	r2, [pc, #4]	@ (8000544 <blinkLed1+0x2c>)
 800053e:	6013      	str	r3, [r2, #0]
	}
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	200003b4 	.word	0x200003b4
 8000548:	48001000 	.word	0x48001000

0800054c <blinkLed2>:

void blinkLed2(void){
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
	static uint32_t lastTick = 0;

	if(HAL_GetTick()-lastTick >= 500){
 8000550:	f000 f9d2 	bl	80008f8 <HAL_GetTick>
 8000554:	4602      	mov	r2, r0
 8000556:	4b09      	ldr	r3, [pc, #36]	@ (800057c <blinkLed2+0x30>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	1ad3      	subs	r3, r2, r3
 800055c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000560:	d309      	bcc.n	8000576 <blinkLed2+0x2a>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8000562:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000566:	4806      	ldr	r0, [pc, #24]	@ (8000580 <blinkLed2+0x34>)
 8000568:	f000 fc4a 	bl	8000e00 <HAL_GPIO_TogglePin>
		lastTick = HAL_GetTick();
 800056c:	f000 f9c4 	bl	80008f8 <HAL_GetTick>
 8000570:	4603      	mov	r3, r0
 8000572:	4a02      	ldr	r2, [pc, #8]	@ (800057c <blinkLed2+0x30>)
 8000574:	6013      	str	r3, [r2, #0]
	}
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200003b8 	.word	0x200003b8
 8000580:	48001000 	.word	0x48001000

08000584 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000588:	b672      	cpsid	i
}
 800058a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <Error_Handler+0x8>

08000590 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000596:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <HAL_MspInit+0x44>)
 8000598:	699b      	ldr	r3, [r3, #24]
 800059a:	4a0e      	ldr	r2, [pc, #56]	@ (80005d4 <HAL_MspInit+0x44>)
 800059c:	f043 0301 	orr.w	r3, r3, #1
 80005a0:	6193      	str	r3, [r2, #24]
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <HAL_MspInit+0x44>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f003 0301 	and.w	r3, r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <HAL_MspInit+0x44>)
 80005b0:	69db      	ldr	r3, [r3, #28]
 80005b2:	4a08      	ldr	r2, [pc, #32]	@ (80005d4 <HAL_MspInit+0x44>)
 80005b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b8:	61d3      	str	r3, [r2, #28]
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <HAL_MspInit+0x44>)
 80005bc:	69db      	ldr	r3, [r3, #28]
 80005be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c2:	603b      	str	r3, [r7, #0]
 80005c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005c6:	2007      	movs	r0, #7
 80005c8:	f000 fa54 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40021000 	.word	0x40021000

080005d8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b08a      	sub	sp, #40	@ 0x28
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a17      	ldr	r2, [pc, #92]	@ (8000654 <HAL_I2C_MspInit+0x7c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d127      	bne.n	800064a <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fa:	4b17      	ldr	r3, [pc, #92]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	4a16      	ldr	r2, [pc, #88]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000600:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000604:	6153      	str	r3, [r2, #20]
 8000606:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000612:	23c0      	movs	r3, #192	@ 0xc0
 8000614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000616:	2312      	movs	r3, #18
 8000618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061a:	2301      	movs	r3, #1
 800061c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800061e:	2303      	movs	r3, #3
 8000620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000622:	2304      	movs	r3, #4
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	4619      	mov	r1, r3
 800062c:	480b      	ldr	r0, [pc, #44]	@ (800065c <HAL_I2C_MspInit+0x84>)
 800062e:	f000 fa55 	bl	8000adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000632:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	4a08      	ldr	r2, [pc, #32]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000638:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800063c:	61d3      	str	r3, [r2, #28]
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <HAL_I2C_MspInit+0x80>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800064a:	bf00      	nop
 800064c:	3728      	adds	r7, #40	@ 0x28
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40005400 	.word	0x40005400
 8000658:	40021000 	.word	0x40021000
 800065c:	48000400 	.word	0x48000400

08000660 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000668:	f107 0314 	add.w	r3, r7, #20
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a17      	ldr	r2, [pc, #92]	@ (80006dc <HAL_SPI_MspInit+0x7c>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d128      	bne.n	80006d4 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000682:	4b17      	ldr	r3, [pc, #92]	@ (80006e0 <HAL_SPI_MspInit+0x80>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a16      	ldr	r2, [pc, #88]	@ (80006e0 <HAL_SPI_MspInit+0x80>)
 8000688:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <HAL_SPI_MspInit+0x80>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <HAL_SPI_MspInit+0x80>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a10      	ldr	r2, [pc, #64]	@ (80006e0 <HAL_SPI_MspInit+0x80>)
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <HAL_SPI_MspInit+0x80>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006b2:	23e0      	movs	r3, #224	@ 0xe0
 80006b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006c2:	2305      	movs	r3, #5
 80006c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	4619      	mov	r1, r3
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d0:	f000 fa04 	bl	8000adc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80006d4:	bf00      	nop
 80006d6:	3728      	adds	r7, #40	@ 0x28
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40013000 	.word	0x40013000
 80006e0:	40021000 	.word	0x40021000

080006e4 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	@ 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 0314 	add.w	r3, r7, #20
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a18      	ldr	r2, [pc, #96]	@ (8000764 <HAL_PCD_MspInit+0x80>)
 8000702:	4293      	cmp	r3, r2
 8000704:	d129      	bne.n	800075a <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <HAL_PCD_MspInit+0x84>)
 8000708:	695b      	ldr	r3, [r3, #20]
 800070a:	4a17      	ldr	r2, [pc, #92]	@ (8000768 <HAL_PCD_MspInit+0x84>)
 800070c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000710:	6153      	str	r3, [r2, #20]
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <HAL_PCD_MspInit+0x84>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800071e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000724:	2302      	movs	r3, #2
 8000726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800072c:	2303      	movs	r3, #3
 800072e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000730:	230e      	movs	r3, #14
 8000732:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000734:	f107 0314 	add.w	r3, r7, #20
 8000738:	4619      	mov	r1, r3
 800073a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800073e:	f000 f9cd 	bl	8000adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <HAL_PCD_MspInit+0x84>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	4a08      	ldr	r2, [pc, #32]	@ (8000768 <HAL_PCD_MspInit+0x84>)
 8000748:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800074c:	61d3      	str	r3, [r2, #28]
 800074e:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <HAL_PCD_MspInit+0x84>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 800075a:	bf00      	nop
 800075c:	3728      	adds	r7, #40	@ 0x28
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40005c00 	.word	0x40005c00
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <NMI_Handler+0x4>

08000774 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <MemManage_Handler+0x4>

08000784 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <UsageFault_Handler+0x4>

08000794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr

080007a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr

080007be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c2:	f000 f885 	bl	80008d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
	...

080007cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <SystemInit+0x20>)
 80007d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007d6:	4a05      	ldr	r2, [pc, #20]	@ (80007ec <SystemInit+0x20>)
 80007d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e0:	bf00      	nop
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000828 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f4:	f7ff ffea 	bl	80007cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480c      	ldr	r0, [pc, #48]	@ (800082c <LoopForever+0x6>)
  ldr r1, =_edata
 80007fa:	490d      	ldr	r1, [pc, #52]	@ (8000830 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000834 <LoopForever+0xe>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000810:	4c0a      	ldr	r4, [pc, #40]	@ (800083c <LoopForever+0x16>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800081e:	f002 f96d 	bl	8002afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000822:	f7ff fcd1 	bl	80001c8 <main>

08000826 <LoopForever>:

LoopForever:
    b LoopForever
 8000826:	e7fe      	b.n	8000826 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000828:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800082c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000830:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000834:	08002b9c 	.word	0x08002b9c
  ldr r2, =_sbss
 8000838:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800083c:	200003c0 	.word	0x200003c0

08000840 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000840:	e7fe      	b.n	8000840 <ADC1_2_IRQHandler>
	...

08000844 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000848:	4b08      	ldr	r3, [pc, #32]	@ (800086c <HAL_Init+0x28>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a07      	ldr	r2, [pc, #28]	@ (800086c <HAL_Init+0x28>)
 800084e:	f043 0310 	orr.w	r3, r3, #16
 8000852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000854:	2003      	movs	r0, #3
 8000856:	f000 f90d 	bl	8000a74 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085a:	2000      	movs	r0, #0
 800085c:	f000 f808 	bl	8000870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000860:	f7ff fe96 	bl	8000590 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000864:	2300      	movs	r3, #0
}
 8000866:	4618      	mov	r0, r3
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40022000 	.word	0x40022000

08000870 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_InitTick+0x54>)
 800087a:	681a      	ldr	r2, [r3, #0]
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <HAL_InitTick+0x58>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4619      	mov	r1, r3
 8000882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000886:	fbb3 f3f1 	udiv	r3, r3, r1
 800088a:	fbb2 f3f3 	udiv	r3, r2, r3
 800088e:	4618      	mov	r0, r3
 8000890:	f000 f917 	bl	8000ac2 <HAL_SYSTICK_Config>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089a:	2301      	movs	r3, #1
 800089c:	e00e      	b.n	80008bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b0f      	cmp	r3, #15
 80008a2:	d80a      	bhi.n	80008ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a4:	2200      	movs	r2, #0
 80008a6:	6879      	ldr	r1, [r7, #4]
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f000 f8ed 	bl	8000a8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b0:	4a06      	ldr	r2, [pc, #24]	@ (80008cc <HAL_InitTick+0x5c>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008b6:	2300      	movs	r3, #0
 80008b8:	e000      	b.n	80008bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ba:	2301      	movs	r3, #1
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000000 	.word	0x20000000
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000004 	.word	0x20000004

080008d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_IncTick+0x20>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	461a      	mov	r2, r3
 80008da:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_IncTick+0x24>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a04      	ldr	r2, [pc, #16]	@ (80008f4 <HAL_IncTick+0x24>)
 80008e2:	6013      	str	r3, [r2, #0]
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	20000008 	.word	0x20000008
 80008f4:	200003bc 	.word	0x200003bc

080008f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80008fc:	4b03      	ldr	r3, [pc, #12]	@ (800090c <HAL_GetTick+0x14>)
 80008fe:	681b      	ldr	r3, [r3, #0]
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	200003bc 	.word	0x200003bc

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	6039      	str	r1, [r7, #0]
 800097e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000984:	2b00      	cmp	r3, #0
 8000986:	db0a      	blt.n	800099e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	b2da      	uxtb	r2, r3
 800098c:	490c      	ldr	r1, [pc, #48]	@ (80009c0 <__NVIC_SetPriority+0x4c>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	0112      	lsls	r2, r2, #4
 8000994:	b2d2      	uxtb	r2, r2
 8000996:	440b      	add	r3, r1
 8000998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800099c:	e00a      	b.n	80009b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4908      	ldr	r1, [pc, #32]	@ (80009c4 <__NVIC_SetPriority+0x50>)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	3b04      	subs	r3, #4
 80009ac:	0112      	lsls	r2, r2, #4
 80009ae:	b2d2      	uxtb	r2, r2
 80009b0:	440b      	add	r3, r1
 80009b2:	761a      	strb	r2, [r3, #24]
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000e100 	.word	0xe000e100
 80009c4:	e000ed00 	.word	0xe000ed00

080009c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b089      	sub	sp, #36	@ 0x24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	60b9      	str	r1, [r7, #8]
 80009d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f1c3 0307 	rsb	r3, r3, #7
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	bf28      	it	cs
 80009e6:	2304      	movcs	r3, #4
 80009e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	3304      	adds	r3, #4
 80009ee:	2b06      	cmp	r3, #6
 80009f0:	d902      	bls.n	80009f8 <NVIC_EncodePriority+0x30>
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	3b03      	subs	r3, #3
 80009f6:	e000      	b.n	80009fa <NVIC_EncodePriority+0x32>
 80009f8:	2300      	movs	r3, #0
 80009fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009fc:	f04f 32ff 	mov.w	r2, #4294967295
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a10:	f04f 31ff 	mov.w	r1, #4294967295
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	43d9      	mvns	r1, r3
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a20:	4313      	orrs	r3, r2
         );
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3724      	adds	r7, #36	@ 0x24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
	...

08000a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a40:	d301      	bcc.n	8000a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00f      	b.n	8000a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <SysTick_Config+0x40>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f7ff ff8e 	bl	8000974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a58:	4b05      	ldr	r3, [pc, #20]	@ (8000a70 <SysTick_Config+0x40>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <SysTick_Config+0x40>)
 8000a60:	2207      	movs	r2, #7
 8000a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	e000e010 	.word	0xe000e010

08000a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a7c:	6878      	ldr	r0, [r7, #4]
 8000a7e:	f7ff ff47 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b086      	sub	sp, #24
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	4603      	mov	r3, r0
 8000a92:	60b9      	str	r1, [r7, #8]
 8000a94:	607a      	str	r2, [r7, #4]
 8000a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a9c:	f7ff ff5c 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000aa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	68b9      	ldr	r1, [r7, #8]
 8000aa6:	6978      	ldr	r0, [r7, #20]
 8000aa8:	f7ff ff8e 	bl	80009c8 <NVIC_EncodePriority>
 8000aac:	4602      	mov	r2, r0
 8000aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff5d 	bl	8000974 <__NVIC_SetPriority>
}
 8000aba:	bf00      	nop
 8000abc:	3718      	adds	r7, #24
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffb0 	bl	8000a30 <SysTick_Config>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aea:	e154      	b.n	8000d96 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	2101      	movs	r1, #1
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	4013      	ands	r3, r2
 8000afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	f000 8146 	beq.w	8000d90 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	f003 0303 	and.w	r3, r3, #3
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d005      	beq.n	8000b1c <HAL_GPIO_Init+0x40>
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	f003 0303 	and.w	r3, r3, #3
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d130      	bne.n	8000b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689b      	ldr	r3, [r3, #8]
 8000b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	005b      	lsls	r3, r3, #1
 8000b26:	2203      	movs	r2, #3
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	693a      	ldr	r2, [r7, #16]
 8000b30:	4013      	ands	r3, r2
 8000b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68da      	ldr	r2, [r3, #12]
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b40:	693a      	ldr	r2, [r7, #16]
 8000b42:	4313      	orrs	r3, r2
 8000b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b52:	2201      	movs	r2, #1
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	091b      	lsrs	r3, r3, #4
 8000b68:	f003 0201 	and.w	r2, r3, #1
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4313      	orrs	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 0303 	and.w	r3, r3, #3
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d017      	beq.n	8000bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	2203      	movs	r2, #3
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 0303 	and.w	r3, r3, #3
 8000bc2:	2b02      	cmp	r3, #2
 8000bc4:	d123      	bne.n	8000c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	08da      	lsrs	r2, r3, #3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	3208      	adds	r2, #8
 8000bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	220f      	movs	r2, #15
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	691a      	ldr	r2, [r3, #16]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	f003 0307 	and.w	r3, r3, #7
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	08da      	lsrs	r2, r3, #3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3208      	adds	r2, #8
 8000c08:	6939      	ldr	r1, [r7, #16]
 8000c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f003 0203 	and.w	r2, r3, #3
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	005b      	lsls	r3, r3, #1
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4313      	orrs	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	f000 80a0 	beq.w	8000d90 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c50:	4b58      	ldr	r3, [pc, #352]	@ (8000db4 <HAL_GPIO_Init+0x2d8>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a57      	ldr	r2, [pc, #348]	@ (8000db4 <HAL_GPIO_Init+0x2d8>)
 8000c56:	f043 0301 	orr.w	r3, r3, #1
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b55      	ldr	r3, [pc, #340]	@ (8000db4 <HAL_GPIO_Init+0x2d8>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c68:	4a53      	ldr	r2, [pc, #332]	@ (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	3302      	adds	r3, #2
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	f003 0303 	and.w	r3, r3, #3
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	220f      	movs	r2, #15
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c92:	d019      	beq.n	8000cc8 <HAL_GPIO_Init+0x1ec>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	4a49      	ldr	r2, [pc, #292]	@ (8000dbc <HAL_GPIO_Init+0x2e0>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d013      	beq.n	8000cc4 <HAL_GPIO_Init+0x1e8>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4a48      	ldr	r2, [pc, #288]	@ (8000dc0 <HAL_GPIO_Init+0x2e4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d00d      	beq.n	8000cc0 <HAL_GPIO_Init+0x1e4>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	4a47      	ldr	r2, [pc, #284]	@ (8000dc4 <HAL_GPIO_Init+0x2e8>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d007      	beq.n	8000cbc <HAL_GPIO_Init+0x1e0>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a46      	ldr	r2, [pc, #280]	@ (8000dc8 <HAL_GPIO_Init+0x2ec>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d101      	bne.n	8000cb8 <HAL_GPIO_Init+0x1dc>
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	e008      	b.n	8000cca <HAL_GPIO_Init+0x1ee>
 8000cb8:	2305      	movs	r3, #5
 8000cba:	e006      	b.n	8000cca <HAL_GPIO_Init+0x1ee>
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	e004      	b.n	8000cca <HAL_GPIO_Init+0x1ee>
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	e002      	b.n	8000cca <HAL_GPIO_Init+0x1ee>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e000      	b.n	8000cca <HAL_GPIO_Init+0x1ee>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	f002 0203 	and.w	r2, r2, #3
 8000cd0:	0092      	lsls	r2, r2, #2
 8000cd2:	4093      	lsls	r3, r2
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cda:	4937      	ldr	r1, [pc, #220]	@ (8000db8 <HAL_GPIO_Init+0x2dc>)
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	089b      	lsrs	r3, r3, #2
 8000ce0:	3302      	adds	r3, #2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ce8:	4b38      	ldr	r3, [pc, #224]	@ (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000cea:	689b      	ldr	r3, [r3, #8]
 8000cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d0c:	4a2f      	ldr	r2, [pc, #188]	@ (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d12:	4b2e      	ldr	r3, [pc, #184]	@ (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000d14:	68db      	ldr	r3, [r3, #12]
 8000d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d36:	4a25      	ldr	r2, [pc, #148]	@ (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d3c:	4b23      	ldr	r3, [pc, #140]	@ (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	43db      	mvns	r3, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d003      	beq.n	8000d60 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d60:	4a1a      	ldr	r2, [pc, #104]	@ (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d66:	4b19      	ldr	r3, [pc, #100]	@ (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4013      	ands	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d8a:	4a10      	ldr	r2, [pc, #64]	@ (8000dcc <HAL_GPIO_Init+0x2f0>)
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	3301      	adds	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f47f aea3 	bne.w	8000aec <HAL_GPIO_Init+0x10>
  }
}
 8000da6:	bf00      	nop
 8000da8:	bf00      	nop
 8000daa:	371c      	adds	r7, #28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	40021000 	.word	0x40021000
 8000db8:	40010000 	.word	0x40010000
 8000dbc:	48000400 	.word	0x48000400
 8000dc0:	48000800 	.word	0x48000800
 8000dc4:	48000c00 	.word	0x48000c00
 8000dc8:	48001000 	.word	0x48001000
 8000dcc:	40010400 	.word	0x40010400

08000dd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	460b      	mov	r3, r1
 8000dda:	807b      	strh	r3, [r7, #2]
 8000ddc:	4613      	mov	r3, r2
 8000dde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000de0:	787b      	ldrb	r3, [r7, #1]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000de6:	887a      	ldrh	r2, [r7, #2]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000dec:	e002      	b.n	8000df4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dee:	887a      	ldrh	r2, [r7, #2]
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4013      	ands	r3, r2
 8000e18:	041a      	lsls	r2, r3, #16
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	43d9      	mvns	r1, r3
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	400b      	ands	r3, r1
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	619a      	str	r2, [r3, #24]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e08d      	b.n	8000f62 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d106      	bne.n	8000e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff fbbc 	bl	80005d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2224      	movs	r2, #36	@ 0x24
 8000e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0201 	bic.w	r2, r2, #1
 8000e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685a      	ldr	r2, [r3, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d107      	bne.n	8000eae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689a      	ldr	r2, [r3, #8]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	e006      	b.n	8000ebc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000eba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d108      	bne.n	8000ed6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	e007      	b.n	8000ee6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	685a      	ldr	r2, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000ee4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ef4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ef8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	430a      	orrs	r2, r1
 8000f22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	69d9      	ldr	r1, [r3, #28]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6a1a      	ldr	r2, [r3, #32]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f042 0201 	orr.w	r2, r2, #1
 8000f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2200      	movs	r2, #0
 8000f48:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2200      	movs	r2, #0
 8000f56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b083      	sub	sp, #12
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
 8000f72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b20      	cmp	r3, #32
 8000f7e:	d138      	bne.n	8000ff2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d101      	bne.n	8000f8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	e032      	b.n	8000ff4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2201      	movs	r2, #1
 8000f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2224      	movs	r2, #36	@ 0x24
 8000f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f022 0201 	bic.w	r2, r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000fbc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6819      	ldr	r1, [r3, #0]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f042 0201 	orr.w	r2, r2, #1
 8000fdc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2220      	movs	r2, #32
 8000fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	e000      	b.n	8000ff4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000ff2:	2302      	movs	r3, #2
  }
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr

08001000 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b20      	cmp	r3, #32
 8001014:	d139      	bne.n	800108a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800101c:	2b01      	cmp	r3, #1
 800101e:	d101      	bne.n	8001024 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001020:	2302      	movs	r3, #2
 8001022:	e033      	b.n	800108c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2201      	movs	r2, #1
 8001028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2224      	movs	r2, #36	@ 0x24
 8001030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 0201 	bic.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001052:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0201 	orr.w	r2, r2, #1
 8001074:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2220      	movs	r2, #32
 800107a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800108a:	2302      	movs	r3, #2
  }
}
 800108c:	4618      	mov	r0, r3
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e0b9      	b.n	800121e <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d106      	bne.n	80010c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2200      	movs	r2, #0
 80010ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fb10 	bl	80006e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2203      	movs	r2, #3
 80010c8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fcd2 	bl	8002a7a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e03e      	b.n	800115a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	4413      	add	r3, r2
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	440b      	add	r3, r1
 80010ea:	3311      	adds	r3, #17
 80010ec:	2201      	movs	r2, #1
 80010ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010f0:	7bfa      	ldrb	r2, [r7, #15]
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	4413      	add	r3, r2
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	440b      	add	r3, r1
 80010fe:	3310      	adds	r3, #16
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	6879      	ldr	r1, [r7, #4]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	440b      	add	r3, r1
 8001112:	3313      	adds	r3, #19
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	440b      	add	r3, r1
 8001126:	3320      	adds	r3, #32
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4613      	mov	r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	00db      	lsls	r3, r3, #3
 8001138:	440b      	add	r3, r1
 800113a:	3324      	adds	r3, #36	@ 0x24
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	1c5a      	adds	r2, r3, #1
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	440b      	add	r3, r1
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	3301      	adds	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	791b      	ldrb	r3, [r3, #4]
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	429a      	cmp	r2, r3
 8001162:	d3bb      	bcc.n	80010dc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e044      	b.n	80011f4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800116a:	7bfa      	ldrb	r2, [r7, #15]
 800116c:	6879      	ldr	r1, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	440b      	add	r3, r1
 8001178:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	440b      	add	r3, r1
 800118e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001192:	7bfa      	ldrb	r2, [r7, #15]
 8001194:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	4613      	mov	r3, r2
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	00db      	lsls	r3, r3, #3
 80011a2:	440b      	add	r3, r1
 80011a4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	440b      	add	r3, r1
 80011ba:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	00db      	lsls	r3, r3, #3
 80011ce:	440b      	add	r3, r1
 80011d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	4413      	add	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	440b      	add	r3, r1
 80011e6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	3301      	adds	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	791b      	ldrb	r3, [r3, #4]
 80011f8:	7bfa      	ldrb	r2, [r7, #15]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d3b5      	bcc.n	800116a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6818      	ldr	r0, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	3304      	adds	r3, #4
 8001206:	e893 0006 	ldmia.w	r3, {r1, r2}
 800120a:	f001 fc51 	bl	8002ab0 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800122e:	af00      	add	r7, sp, #0
 8001230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001234:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001238:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800123e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	f000 bff4 	b.w	8002236 <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001252:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	f000 816d 	beq.w	800153e <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001264:	4bb4      	ldr	r3, [pc, #720]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f003 030c 	and.w	r3, r3, #12
 800126c:	2b04      	cmp	r3, #4
 800126e:	d00c      	beq.n	800128a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001270:	4bb1      	ldr	r3, [pc, #708]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b08      	cmp	r3, #8
 800127a:	d157      	bne.n	800132c <HAL_RCC_OscConfig+0x104>
 800127c:	4bae      	ldr	r3, [pc, #696]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001288:	d150      	bne.n	800132c <HAL_RCC_OscConfig+0x104>
 800128a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800128e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001292:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001296:	fa93 f3a3 	rbit	r3, r3
 800129a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800129e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80012aa:	d802      	bhi.n	80012b2 <HAL_RCC_OscConfig+0x8a>
 80012ac:	4ba2      	ldr	r3, [pc, #648]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	e015      	b.n	80012de <HAL_RCC_OscConfig+0xb6>
 80012b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012b6:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80012c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012ca:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80012ce:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80012d2:	fa93 f3a3 	rbit	r3, r3
 80012d6:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80012da:	4b97      	ldr	r3, [pc, #604]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 80012dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012e2:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80012e6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80012ea:	fa92 f2a2 	rbit	r2, r2
 80012ee:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80012f2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80012f6:	fab2 f282 	clz	r2, r2
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	f042 0220 	orr.w	r2, r2, #32
 8001300:	b2d2      	uxtb	r2, r2
 8001302:	f002 021f 	and.w	r2, r2, #31
 8001306:	2101      	movs	r1, #1
 8001308:	fa01 f202 	lsl.w	r2, r1, r2
 800130c:	4013      	ands	r3, r2
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8114 	beq.w	800153c <HAL_RCC_OscConfig+0x314>
 8001314:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001318:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	f040 810b 	bne.w	800153c <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	f000 bf85 	b.w	8002236 <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001330:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800133c:	d106      	bne.n	800134c <HAL_RCC_OscConfig+0x124>
 800133e:	4b7e      	ldr	r3, [pc, #504]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a7d      	ldr	r2, [pc, #500]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 8001344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	e036      	b.n	80013ba <HAL_RCC_OscConfig+0x192>
 800134c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001350:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10c      	bne.n	8001376 <HAL_RCC_OscConfig+0x14e>
 800135c:	4b76      	ldr	r3, [pc, #472]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a75      	ldr	r2, [pc, #468]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b73      	ldr	r3, [pc, #460]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a72      	ldr	r2, [pc, #456]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	e021      	b.n	80013ba <HAL_RCC_OscConfig+0x192>
 8001376:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800137a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x17a>
 8001388:	4b6b      	ldr	r3, [pc, #428]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a6a      	ldr	r2, [pc, #424]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 800138e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b68      	ldr	r3, [pc, #416]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a67      	ldr	r2, [pc, #412]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 800139a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	e00b      	b.n	80013ba <HAL_RCC_OscConfig+0x192>
 80013a2:	4b65      	ldr	r3, [pc, #404]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a64      	ldr	r2, [pc, #400]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 80013a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b62      	ldr	r3, [pc, #392]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a61      	ldr	r2, [pc, #388]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 80013b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 80013bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013be:	f023 020f 	bic.w	r2, r3, #15
 80013c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	495a      	ldr	r1, [pc, #360]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d054      	beq.n	800148e <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fa88 	bl	80008f8 <HAL_GetTick>
 80013e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ec:	e00a      	b.n	8001404 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ee:	f7ff fa83 	bl	80008f8 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b64      	cmp	r3, #100	@ 0x64
 80013fc:	d902      	bls.n	8001404 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	f000 bf19 	b.w	8002236 <HAL_RCC_OscConfig+0x100e>
 8001404:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001408:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800140c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001410:	fa93 f3a3 	rbit	r3, r3
 8001414:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001418:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141c:	fab3 f383 	clz	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b3f      	cmp	r3, #63	@ 0x3f
 8001424:	d802      	bhi.n	800142c <HAL_RCC_OscConfig+0x204>
 8001426:	4b44      	ldr	r3, [pc, #272]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	e015      	b.n	8001458 <HAL_RCC_OscConfig+0x230>
 800142c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001430:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001434:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001440:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001444:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001448:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800144c:	fa93 f3a3 	rbit	r3, r3
 8001450:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001454:	4b38      	ldr	r3, [pc, #224]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 8001456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001458:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800145c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001460:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001464:	fa92 f2a2 	rbit	r2, r2
 8001468:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 800146c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001470:	fab2 f282 	clz	r2, r2
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	f042 0220 	orr.w	r2, r2, #32
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	f002 021f 	and.w	r2, r2, #31
 8001480:	2101      	movs	r1, #1
 8001482:	fa01 f202 	lsl.w	r2, r1, r2
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0b0      	beq.n	80013ee <HAL_RCC_OscConfig+0x1c6>
 800148c:	e057      	b.n	800153e <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fa33 	bl	80008f8 <HAL_GetTick>
 8001492:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001496:	e00a      	b.n	80014ae <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001498:	f7ff fa2e 	bl	80008f8 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b64      	cmp	r3, #100	@ 0x64
 80014a6:	d902      	bls.n	80014ae <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	f000 bec4 	b.w	8002236 <HAL_RCC_OscConfig+0x100e>
 80014ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014b2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80014c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80014ce:	d802      	bhi.n	80014d6 <HAL_RCC_OscConfig+0x2ae>
 80014d0:	4b19      	ldr	r3, [pc, #100]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	e015      	b.n	8001502 <HAL_RCC_OscConfig+0x2da>
 80014d6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014da:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014de:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80014e2:	fa93 f3a3 	rbit	r3, r3
 80014e6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80014ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014ee:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80014f2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80014fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <HAL_RCC_OscConfig+0x310>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001502:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001506:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800150a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800150e:	fa92 f2a2 	rbit	r2, r2
 8001512:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001516:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800151a:	fab2 f282 	clz	r2, r2
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	f042 0220 	orr.w	r2, r2, #32
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	f002 021f 	and.w	r2, r2, #31
 800152a:	2101      	movs	r1, #1
 800152c:	fa01 f202 	lsl.w	r2, r1, r2
 8001530:	4013      	ands	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1b0      	bne.n	8001498 <HAL_RCC_OscConfig+0x270>
 8001536:	e002      	b.n	800153e <HAL_RCC_OscConfig+0x316>
 8001538:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001542:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 816c 	beq.w	800182c <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001554:	4bcc      	ldr	r3, [pc, #816]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00b      	beq.n	8001578 <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001560:	4bc9      	ldr	r3, [pc, #804]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b08      	cmp	r3, #8
 800156a:	d16d      	bne.n	8001648 <HAL_RCC_OscConfig+0x420>
 800156c:	4bc6      	ldr	r3, [pc, #792]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d167      	bne.n	8001648 <HAL_RCC_OscConfig+0x420>
 8001578:	2302      	movs	r3, #2
 800157a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001582:	fa93 f3a3 	rbit	r3, r3
 8001586:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800158a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	fab3 f383 	clz	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b3f      	cmp	r3, #63	@ 0x3f
 8001596:	d802      	bhi.n	800159e <HAL_RCC_OscConfig+0x376>
 8001598:	4bbb      	ldr	r3, [pc, #748]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	e013      	b.n	80015c6 <HAL_RCC_OscConfig+0x39e>
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a4:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80015b6:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80015c2:	4bb1      	ldr	r3, [pc, #708]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	2202      	movs	r2, #2
 80015c8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80015cc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80015d0:	fa92 f2a2 	rbit	r2, r2
 80015d4:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80015d8:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80015dc:	fab2 f282 	clz	r2, r2
 80015e0:	b2d2      	uxtb	r2, r2
 80015e2:	f042 0220 	orr.w	r2, r2, #32
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	f002 021f 	and.w	r2, r2, #31
 80015ec:	2101      	movs	r1, #1
 80015ee:	fa01 f202 	lsl.w	r2, r1, r2
 80015f2:	4013      	ands	r3, r2
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d00a      	beq.n	800160e <HAL_RCC_OscConfig+0x3e6>
 80015f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d002      	beq.n	800160e <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	f000 be14 	b.w	8002236 <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160e:	4b9e      	ldr	r3, [pc, #632]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	21f8      	movs	r1, #248	@ 0xf8
 8001624:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800162c:	fa91 f1a1 	rbit	r1, r1
 8001630:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001634:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8001638:	fab1 f181 	clz	r1, r1
 800163c:	b2c9      	uxtb	r1, r1
 800163e:	408b      	lsls	r3, r1
 8001640:	4991      	ldr	r1, [pc, #580]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 8001642:	4313      	orrs	r3, r2
 8001644:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	e0f1      	b.n	800182c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001648:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800164c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 8083 	beq.w	8001760 <HAL_RCC_OscConfig+0x538>
 800165a:	2301      	movs	r3, #1
 800165c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800166c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800167a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	461a      	mov	r2, r3
 8001682:	2301      	movs	r3, #1
 8001684:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001686:	f7ff f937 	bl	80008f8 <HAL_GetTick>
 800168a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800168e:	e00a      	b.n	80016a6 <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001690:	f7ff f932 	bl	80008f8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d902      	bls.n	80016a6 <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	f000 bdc8 	b.w	8002236 <HAL_RCC_OscConfig+0x100e>
 80016a6:	2302      	movs	r3, #2
 80016a8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80016b8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80016c4:	d802      	bhi.n	80016cc <HAL_RCC_OscConfig+0x4a4>
 80016c6:	4b70      	ldr	r3, [pc, #448]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	e013      	b.n	80016f4 <HAL_RCC_OscConfig+0x4cc>
 80016cc:	2302      	movs	r3, #2
 80016ce:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80016d6:	fa93 f3a3 	rbit	r3, r3
 80016da:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80016de:	2302      	movs	r3, #2
 80016e0:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80016e4:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80016f0:	4b65      	ldr	r3, [pc, #404]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	2202      	movs	r2, #2
 80016f6:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80016fa:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80016fe:	fa92 f2a2 	rbit	r2, r2
 8001702:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8001706:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800170a:	fab2 f282 	clz	r2, r2
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	f042 0220 	orr.w	r2, r2, #32
 8001714:	b2d2      	uxtb	r2, r2
 8001716:	f002 021f 	and.w	r2, r2, #31
 800171a:	2101      	movs	r1, #1
 800171c:	fa01 f202 	lsl.w	r2, r1, r2
 8001720:	4013      	ands	r3, r2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0b4      	beq.n	8001690 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	4b58      	ldr	r3, [pc, #352]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800172e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001732:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	21f8      	movs	r1, #248	@ 0xf8
 800173c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001744:	fa91 f1a1 	rbit	r1, r1
 8001748:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 800174c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001750:	fab1 f181 	clz	r1, r1
 8001754:	b2c9      	uxtb	r1, r1
 8001756:	408b      	lsls	r3, r1
 8001758:	494b      	ldr	r1, [pc, #300]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
 800175e:	e065      	b.n	800182c <HAL_RCC_OscConfig+0x604>
 8001760:	2301      	movs	r3, #1
 8001762:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001766:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001772:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001776:	fab3 f383 	clz	r3, r3
 800177a:	b2db      	uxtb	r3, r3
 800177c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001780:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	461a      	mov	r2, r3
 8001788:	2300      	movs	r3, #0
 800178a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178c:	f7ff f8b4 	bl	80008f8 <HAL_GetTick>
 8001790:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001796:	f7ff f8af 	bl	80008f8 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d902      	bls.n	80017ac <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	f000 bd45 	b.w	8002236 <HAL_RCC_OscConfig+0x100e>
 80017ac:	2302      	movs	r3, #2
 80017ae:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80017be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	fab3 f383 	clz	r3, r3
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80017ca:	d802      	bhi.n	80017d2 <HAL_RCC_OscConfig+0x5aa>
 80017cc:	4b2e      	ldr	r3, [pc, #184]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	e013      	b.n	80017fa <HAL_RCC_OscConfig+0x5d2>
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017dc:	fa93 f3a3 	rbit	r3, r3
 80017e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80017e4:	2302      	movs	r3, #2
 80017e6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80017ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017ee:	fa93 f3a3 	rbit	r3, r3
 80017f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80017f6:	4b24      	ldr	r3, [pc, #144]	@ (8001888 <HAL_RCC_OscConfig+0x660>)
 80017f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fa:	2202      	movs	r2, #2
 80017fc:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001800:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001804:	fa92 f2a2 	rbit	r2, r2
 8001808:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800180c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001810:	fab2 f282 	clz	r2, r2
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	f042 0220 	orr.w	r2, r2, #32
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	f002 021f 	and.w	r2, r2, #31
 8001820:	2101      	movs	r1, #1
 8001822:	fa01 f202 	lsl.w	r2, r1, r2
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1b4      	bne.n	8001796 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001830:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0308 	and.w	r3, r3, #8
 800183c:	2b00      	cmp	r3, #0
 800183e:	f000 8115 	beq.w	8001a6c <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001842:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001846:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	699b      	ldr	r3, [r3, #24]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d07e      	beq.n	8001950 <HAL_RCC_OscConfig+0x728>
 8001852:	2301      	movs	r3, #1
 8001854:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001864:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001868:	fab3 f383 	clz	r3, r3
 800186c:	b2db      	uxtb	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <HAL_RCC_OscConfig+0x664>)
 8001872:	4413      	add	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	461a      	mov	r2, r3
 8001878:	2301      	movs	r3, #1
 800187a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7ff f83c 	bl	80008f8 <HAL_GetTick>
 8001880:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001884:	e00f      	b.n	80018a6 <HAL_RCC_OscConfig+0x67e>
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001890:	f7ff f832 	bl	80008f8 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d902      	bls.n	80018a6 <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	f000 bcc8 	b.w	8002236 <HAL_RCC_OscConfig+0x100e>
 80018a6:	2302      	movs	r3, #2
 80018a8:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80018b0:	fa93 f3a3 	rbit	r3, r3
 80018b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80018b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018bc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018c0:	2202      	movs	r2, #2
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	fa93 f2a3 	rbit	r2, r3
 80018d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018e4:	2202      	movs	r2, #2
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018fe:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001900:	4bb0      	ldr	r3, [pc, #704]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001902:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001904:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001908:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800190c:	2102      	movs	r1, #2
 800190e:	6019      	str	r1, [r3, #0]
 8001910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001914:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	fa93 f1a3 	rbit	r1, r3
 800191e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001922:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001926:	6019      	str	r1, [r3, #0]
  return result;
 8001928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	fab3 f383 	clz	r3, r3
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0a0      	beq.n	8001890 <HAL_RCC_OscConfig+0x668>
 800194e:	e08d      	b.n	8001a6c <HAL_RCC_OscConfig+0x844>
 8001950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001954:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001958:	2201      	movs	r2, #1
 800195a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001960:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800196e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001972:	601a      	str	r2, [r3, #0]
  return result;
 8001974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001978:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800197c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	4b90      	ldr	r3, [pc, #576]	@ (8001bc8 <HAL_RCC_OscConfig+0x9a0>)
 8001988:	4413      	add	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	461a      	mov	r2, r3
 800198e:	2300      	movs	r3, #0
 8001990:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001992:	f7fe ffb1 	bl	80008f8 <HAL_GetTick>
 8001996:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800199c:	f7fe ffac 	bl	80008f8 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d902      	bls.n	80019b2 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	f000 bc42 	b.w	8002236 <HAL_RCC_OscConfig+0x100e>
 80019b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019b6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	fa93 f2a3 	rbit	r2, r3
 80019cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019d4:	601a      	str	r2, [r3, #0]
 80019d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019da:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019de:	2202      	movs	r2, #2
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a02:	2202      	movs	r2, #2
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	fa93 f2a3 	rbit	r2, r3
 8001a14:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a18:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a1c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a1e:	4b69      	ldr	r3, [pc, #420]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001a20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a26:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	6019      	str	r1, [r3, #0]
 8001a2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	fa93 f1a3 	rbit	r1, r3
 8001a3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a44:	6019      	str	r1, [r3, #0]
  return result;
 8001a46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	fab3 f383 	clz	r3, r3
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	f003 031f 	and.w	r3, r3, #31
 8001a60:	2101      	movs	r1, #1
 8001a62:	fa01 f303 	lsl.w	r3, r1, r3
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d197      	bne.n	800199c <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a70:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 819e 	beq.w	8001dbe <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a88:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d116      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a94:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	4a4a      	ldr	r2, [pc, #296]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	61d3      	str	r3, [r2, #28]
 8001aa0:	4b48      	ldr	r3, [pc, #288]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aac:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001aba:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001abc:	2301      	movs	r3, #1
 8001abe:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b42      	ldr	r3, [pc, #264]	@ (8001bcc <HAL_RCC_OscConfig+0x9a4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11a      	bne.n	8001b04 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b3f      	ldr	r3, [pc, #252]	@ (8001bcc <HAL_RCC_OscConfig+0x9a4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8001bcc <HAL_RCC_OscConfig+0x9a4>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7fe ff0d 	bl	80008f8 <HAL_GetTick>
 8001ade:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae2:	e009      	b.n	8001af8 <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae4:	f7fe ff08 	bl	80008f8 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b64      	cmp	r3, #100	@ 0x64
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e39e      	b.n	8002236 <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af8:	4b34      	ldr	r3, [pc, #208]	@ (8001bcc <HAL_RCC_OscConfig+0x9a4>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0ef      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d106      	bne.n	8001b22 <HAL_RCC_OscConfig+0x8fa>
 8001b14:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6213      	str	r3, [r2, #32]
 8001b20:	e035      	b.n	8001b8e <HAL_RCC_OscConfig+0x966>
 8001b22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d10c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x924>
 8001b32:	4b24      	ldr	r3, [pc, #144]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4a23      	ldr	r2, [pc, #140]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b38:	f023 0301 	bic.w	r3, r3, #1
 8001b3c:	6213      	str	r3, [r2, #32]
 8001b3e:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4a20      	ldr	r2, [pc, #128]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b44:	f023 0304 	bic.w	r3, r3, #4
 8001b48:	6213      	str	r3, [r2, #32]
 8001b4a:	e020      	b.n	8001b8e <HAL_RCC_OscConfig+0x966>
 8001b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b05      	cmp	r3, #5
 8001b5a:	d10c      	bne.n	8001b76 <HAL_RCC_OscConfig+0x94e>
 8001b5c:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4a18      	ldr	r2, [pc, #96]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b62:	f043 0304 	orr.w	r3, r3, #4
 8001b66:	6213      	str	r3, [r2, #32]
 8001b68:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	4a15      	ldr	r2, [pc, #84]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b6e:	f043 0301 	orr.w	r3, r3, #1
 8001b72:	6213      	str	r3, [r2, #32]
 8001b74:	e00b      	b.n	8001b8e <HAL_RCC_OscConfig+0x966>
 8001b76:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	4a12      	ldr	r2, [pc, #72]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b7c:	f023 0301 	bic.w	r3, r3, #1
 8001b80:	6213      	str	r3, [r2, #32]
 8001b82:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc4 <HAL_RCC_OscConfig+0x99c>)
 8001b88:	f023 0304 	bic.w	r3, r3, #4
 8001b8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b92:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	f000 8087 	beq.w	8001cae <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7fe feaa 	bl	80008f8 <HAL_GetTick>
 8001ba4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba8:	e012      	b.n	8001bd0 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7fe fea5 	bl	80008f8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d908      	bls.n	8001bd0 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e339      	b.n	8002236 <HAL_RCC_OscConfig+0x100e>
 8001bc2:	bf00      	nop
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	10908120 	.word	0x10908120
 8001bcc:	40007000 	.word	0x40007000
 8001bd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001bd8:	2202      	movs	r2, #2
 8001bda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fa93 f2a3 	rbit	r2, r3
 8001bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c04:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f2a3 	rbit	r2, r3
 8001c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c12:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c16:	601a      	str	r2, [r3, #0]
  return result;
 8001c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <HAL_RCC_OscConfig+0xa10>
 8001c32:	4b98      	ldr	r3, [pc, #608]	@ (8001e94 <HAL_RCC_OscConfig+0xc6c>)
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	e013      	b.n	8001c60 <HAL_RCC_OscConfig+0xa38>
 8001c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c40:	2202      	movs	r2, #2
 8001c42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	fa93 f2a3 	rbit	r2, r3
 8001c52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c56:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	4b8d      	ldr	r3, [pc, #564]	@ (8001e94 <HAL_RCC_OscConfig+0xc6c>)
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c64:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001c68:	2102      	movs	r1, #2
 8001c6a:	6011      	str	r1, [r2, #0]
 8001c6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c70:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001c74:	6812      	ldr	r2, [r2, #0]
 8001c76:	fa92 f1a2 	rbit	r1, r2
 8001c7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c7e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c82:	6011      	str	r1, [r2, #0]
  return result;
 8001c84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c88:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c8c:	6812      	ldr	r2, [r2, #0]
 8001c8e:	fab2 f282 	clz	r2, r2
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c98:	b2d2      	uxtb	r2, r2
 8001c9a:	f002 021f 	and.w	r2, r2, #31
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f43f af7f 	beq.w	8001baa <HAL_RCC_OscConfig+0x982>
 8001cac:	e07d      	b.n	8001daa <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cae:	f7fe fe23 	bl	80008f8 <HAL_GetTick>
 8001cb2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cb8:	f7fe fe1e 	bl	80008f8 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e2b2      	b.n	8002236 <HAL_RCC_OscConfig+0x100e>
 8001cd0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001cd8:	2202      	movs	r2, #2
 8001cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce0:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	fa93 f2a3 	rbit	r2, r3
 8001cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cee:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d04:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	fa93 f2a3 	rbit	r2, r3
 8001d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d12:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d16:	601a      	str	r2, [r3, #0]
  return result;
 8001d18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d1c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d20:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	fab3 f383 	clz	r3, r3
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0xb10>
 8001d32:	4b58      	ldr	r3, [pc, #352]	@ (8001e94 <HAL_RCC_OscConfig+0xc6c>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	e013      	b.n	8001d60 <HAL_RCC_OscConfig+0xb38>
 8001d38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d40:	2202      	movs	r2, #2
 8001d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d48:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	fa93 f2a3 	rbit	r2, r3
 8001d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d56:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001e94 <HAL_RCC_OscConfig+0xc6c>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d64:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001d68:	2102      	movs	r1, #2
 8001d6a:	6011      	str	r1, [r2, #0]
 8001d6c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d70:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001d74:	6812      	ldr	r2, [r2, #0]
 8001d76:	fa92 f1a2 	rbit	r1, r2
 8001d7a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d7e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d82:	6011      	str	r1, [r2, #0]
  return result;
 8001d84:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d88:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	fab2 f282 	clz	r2, r2
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	f002 021f 	and.w	r2, r2, #31
 8001d9e:	2101      	movs	r1, #1
 8001da0:	fa01 f202 	lsl.w	r2, r1, r2
 8001da4:	4013      	ands	r3, r2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d186      	bne.n	8001cb8 <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001daa:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b38      	ldr	r3, [pc, #224]	@ (8001e94 <HAL_RCC_OscConfig+0xc6c>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a37      	ldr	r2, [pc, #220]	@ (8001e94 <HAL_RCC_OscConfig+0xc6c>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 8232 	beq.w	8002234 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd0:	4b30      	ldr	r3, [pc, #192]	@ (8001e94 <HAL_RCC_OscConfig+0xc6c>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	f000 8201 	beq.w	80021e0 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	f040 8157 	bne.w	800209e <HAL_RCC_OscConfig+0xe76>
 8001df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001df8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001dfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e02:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e10:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e14:	601a      	str	r2, [r3, #0]
  return result;
 8001e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e1e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e2a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	461a      	mov	r2, r3
 8001e32:	2300      	movs	r3, #0
 8001e34:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e36:	f7fe fd5f 	bl	80008f8 <HAL_GetTick>
 8001e3a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3e:	e009      	b.n	8001e54 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e40:	f7fe fd5a 	bl	80008f8 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e1f0      	b.n	8002236 <HAL_RCC_OscConfig+0x100e>
 8001e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e58:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e5c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e66:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e74:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e78:	601a      	str	r2, [r3, #0]
  return result;
 8001e7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e7e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e82:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e8c:	d804      	bhi.n	8001e98 <HAL_RCC_OscConfig+0xc70>
 8001e8e:	4b01      	ldr	r3, [pc, #4]	@ (8001e94 <HAL_RCC_OscConfig+0xc6c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	e029      	b.n	8001ee8 <HAL_RCC_OscConfig+0xcc0>
 8001e94:	40021000 	.word	0x40021000
 8001e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001ea0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ea4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eaa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	fa93 f2a3 	rbit	r2, r3
 8001eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ec6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ede:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	4bc3      	ldr	r3, [pc, #780]	@ (80021f4 <HAL_RCC_OscConfig+0xfcc>)
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ef0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ef4:	6011      	str	r1, [r2, #0]
 8001ef6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001efa:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	fa92 f1a2 	rbit	r1, r2
 8001f04:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f08:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f0c:	6011      	str	r1, [r2, #0]
  return result;
 8001f0e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f12:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f16:	6812      	ldr	r2, [r2, #0]
 8001f18:	fab2 f282 	clz	r2, r2
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	f042 0220 	orr.w	r2, r2, #32
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	f002 021f 	and.w	r2, r2, #31
 8001f28:	2101      	movs	r1, #1
 8001f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d185      	bne.n	8001e40 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f34:	4baf      	ldr	r3, [pc, #700]	@ (80021f4 <HAL_RCC_OscConfig+0xfcc>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	49a7      	ldr	r1, [pc, #668]	@ (80021f4 <HAL_RCC_OscConfig+0xfcc>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
 8001f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f60:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001f64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f6e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	fa93 f2a3 	rbit	r2, r3
 8001f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f7c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f80:	601a      	str	r2, [r3, #0]
  return result;
 8001f82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f86:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f8a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f8c:	fab3 f383 	clz	r3, r3
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f96:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fca9 	bl	80008f8 <HAL_GetTick>
 8001fa6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001faa:	e009      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fac:	f7fe fca4 	bl	80008f8 <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e13a      	b.n	8002236 <HAL_RCC_OscConfig+0x100e>
 8001fc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001fc8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f2a3 	rbit	r2, r3
 8001fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001fe4:	601a      	str	r2, [r3, #0]
  return result;
 8001fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fea:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001fee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff0:	fab3 f383 	clz	r3, r3
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ff8:	d802      	bhi.n	8002000 <HAL_RCC_OscConfig+0xdd8>
 8001ffa:	4b7e      	ldr	r3, [pc, #504]	@ (80021f4 <HAL_RCC_OscConfig+0xfcc>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	e027      	b.n	8002050 <HAL_RCC_OscConfig+0xe28>
 8002000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002004:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002008:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800200c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002012:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	fa93 f2a3 	rbit	r2, r3
 800201c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002020:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800202e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002038:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	fa93 f2a3 	rbit	r2, r3
 8002042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002046:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	4b69      	ldr	r3, [pc, #420]	@ (80021f4 <HAL_RCC_OscConfig+0xfcc>)
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002054:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002058:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800205c:	6011      	str	r1, [r2, #0]
 800205e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002062:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	fa92 f1a2 	rbit	r1, r2
 800206c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002070:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002074:	6011      	str	r1, [r2, #0]
  return result;
 8002076:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800207a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	fab2 f282 	clz	r2, r2
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	f042 0220 	orr.w	r2, r2, #32
 800208a:	b2d2      	uxtb	r2, r2
 800208c:	f002 021f 	and.w	r2, r2, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f202 	lsl.w	r2, r1, r2
 8002096:	4013      	ands	r3, r2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d087      	beq.n	8001fac <HAL_RCC_OscConfig+0xd84>
 800209c:	e0ca      	b.n	8002234 <HAL_RCC_OscConfig+0x100c>
 800209e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80020a6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020aa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	fa93 f2a3 	rbit	r2, r3
 80020ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020be:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80020c2:	601a      	str	r2, [r3, #0]
  return result;
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80020cc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ce:	fab3 f383 	clz	r3, r3
 80020d2:	b2db      	uxtb	r3, r3
 80020d4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020d8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	461a      	mov	r2, r3
 80020e0:	2300      	movs	r3, #0
 80020e2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe fc08 	bl	80008f8 <HAL_GetTick>
 80020e8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ec:	e009      	b.n	8002102 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ee:	f7fe fc03 	bl	80008f8 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d901      	bls.n	8002102 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80020fe:	2303      	movs	r3, #3
 8002100:	e099      	b.n	8002236 <HAL_RCC_OscConfig+0x100e>
 8002102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002106:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800210a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800210e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002110:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002114:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	fa93 f2a3 	rbit	r2, r3
 800211e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002122:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002126:	601a      	str	r2, [r3, #0]
  return result;
 8002128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800212c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002130:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b3f      	cmp	r3, #63	@ 0x3f
 800213a:	d802      	bhi.n	8002142 <HAL_RCC_OscConfig+0xf1a>
 800213c:	4b2d      	ldr	r3, [pc, #180]	@ (80021f4 <HAL_RCC_OscConfig+0xfcc>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	e027      	b.n	8002192 <HAL_RCC_OscConfig+0xf6a>
 8002142:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002146:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800214a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800214e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	fa93 f2a3 	rbit	r2, r3
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002170:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	fa93 f2a3 	rbit	r2, r3
 8002184:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002188:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	4b19      	ldr	r3, [pc, #100]	@ (80021f4 <HAL_RCC_OscConfig+0xfcc>)
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002196:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800219a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800219e:	6011      	str	r1, [r2, #0]
 80021a0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021a4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	fa92 f1a2 	rbit	r1, r2
 80021ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021b2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80021b6:	6011      	str	r1, [r2, #0]
  return result;
 80021b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021bc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80021c0:	6812      	ldr	r2, [r2, #0]
 80021c2:	fab2 f282 	clz	r2, r2
 80021c6:	b2d2      	uxtb	r2, r2
 80021c8:	f042 0220 	orr.w	r2, r2, #32
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f002 021f 	and.w	r2, r2, #31
 80021d2:	2101      	movs	r1, #1
 80021d4:	fa01 f202 	lsl.w	r2, r1, r2
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d187      	bne.n	80020ee <HAL_RCC_OscConfig+0xec6>
 80021de:	e029      	b.n	8002234 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d103      	bne.n	80021f8 <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e020      	b.n	8002236 <HAL_RCC_OscConfig+0x100e>
 80021f4:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021f8:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_RCC_OscConfig+0x1018>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002200:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002204:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002208:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800220c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	429a      	cmp	r2, r3
 8002216:	d10b      	bne.n	8002230 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002218:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800221c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002220:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002224:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800222c:	429a      	cmp	r2, r3
 800222e:	d001      	beq.n	8002234 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b09e      	sub	sp, #120	@ 0x78
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e154      	b.n	8002506 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b89      	ldr	r3, [pc, #548]	@ (8002484 <HAL_RCC_ClockConfig+0x240>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d910      	bls.n	800228c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b86      	ldr	r3, [pc, #536]	@ (8002484 <HAL_RCC_ClockConfig+0x240>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f023 0207 	bic.w	r2, r3, #7
 8002272:	4984      	ldr	r1, [pc, #528]	@ (8002484 <HAL_RCC_ClockConfig+0x240>)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	4313      	orrs	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b82      	ldr	r3, [pc, #520]	@ (8002484 <HAL_RCC_ClockConfig+0x240>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e13c      	b.n	8002506 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0302 	and.w	r3, r3, #2
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002298:	4b7b      	ldr	r3, [pc, #492]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	4978      	ldr	r1, [pc, #480]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80cd 	beq.w	8002452 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d137      	bne.n	8002330 <HAL_RCC_ClockConfig+0xec>
 80022c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80022ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80022d8:	d802      	bhi.n	80022e0 <HAL_RCC_ClockConfig+0x9c>
 80022da:	4b6b      	ldr	r3, [pc, #428]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	e00f      	b.n	8002300 <HAL_RCC_ClockConfig+0xbc>
 80022e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	667b      	str	r3, [r7, #100]	@ 0x64
 80022ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80022f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022f6:	fa93 f3a3 	rbit	r3, r3
 80022fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80022fc:	4b62      	ldr	r3, [pc, #392]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002300:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002304:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002306:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002308:	fa92 f2a2 	rbit	r2, r2
 800230c:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800230e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	f002 021f 	and.w	r2, r2, #31
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f202 	lsl.w	r2, r1, r2
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d171      	bne.n	8002410 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0ea      	b.n	8002506 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2b02      	cmp	r3, #2
 8002336:	d137      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x164>
 8002338:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800233c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002350:	d802      	bhi.n	8002358 <HAL_RCC_ClockConfig+0x114>
 8002352:	4b4d      	ldr	r3, [pc, #308]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	e00f      	b.n	8002378 <HAL_RCC_ClockConfig+0x134>
 8002358:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800235c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	647b      	str	r3, [r7, #68]	@ 0x44
 8002366:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800236a:	643b      	str	r3, [r7, #64]	@ 0x40
 800236c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800236e:	fa93 f3a3 	rbit	r3, r3
 8002372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002374:	4b44      	ldr	r3, [pc, #272]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 8002376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002378:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800237c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800237e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002380:	fa92 f2a2 	rbit	r2, r2
 8002384:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002386:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002388:	fab2 f282 	clz	r2, r2
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f042 0220 	orr.w	r2, r2, #32
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f002 021f 	and.w	r2, r2, #31
 8002398:	2101      	movs	r1, #1
 800239a:	fa01 f202 	lsl.w	r2, r1, r2
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d135      	bne.n	8002410 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0ae      	b.n	8002506 <HAL_RCC_ClockConfig+0x2c2>
 80023a8:	2302      	movs	r3, #2
 80023aa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80023b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023b6:	fab3 f383 	clz	r3, r3
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80023be:	d802      	bhi.n	80023c6 <HAL_RCC_ClockConfig+0x182>
 80023c0:	4b31      	ldr	r3, [pc, #196]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	e00d      	b.n	80023e2 <HAL_RCC_ClockConfig+0x19e>
 80023c6:	2302      	movs	r3, #2
 80023c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023cc:	fa93 f3a3 	rbit	r3, r3
 80023d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d2:	2302      	movs	r3, #2
 80023d4:	623b      	str	r3, [r7, #32]
 80023d6:	6a3b      	ldr	r3, [r7, #32]
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	4b2a      	ldr	r3, [pc, #168]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e2:	2202      	movs	r2, #2
 80023e4:	61ba      	str	r2, [r7, #24]
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	fa92 f2a2 	rbit	r2, r2
 80023ec:	617a      	str	r2, [r7, #20]
  return result;
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	fab2 f282 	clz	r2, r2
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	f042 0220 	orr.w	r2, r2, #32
 80023fa:	b2d2      	uxtb	r2, r2
 80023fc:	f002 021f 	and.w	r2, r2, #31
 8002400:	2101      	movs	r1, #1
 8002402:	fa01 f202 	lsl.w	r2, r1, r2
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e07a      	b.n	8002506 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002410:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 0203 	bic.w	r2, r3, #3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	491a      	ldr	r1, [pc, #104]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002422:	f7fe fa69 	bl	80008f8 <HAL_GetTick>
 8002426:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002428:	e00a      	b.n	8002440 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242a:	f7fe fa65 	bl	80008f8 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e062      	b.n	8002506 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002440:	4b11      	ldr	r3, [pc, #68]	@ (8002488 <HAL_RCC_ClockConfig+0x244>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 020c 	and.w	r2, r3, #12
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	429a      	cmp	r2, r3
 8002450:	d1eb      	bne.n	800242a <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002452:	4b0c      	ldr	r3, [pc, #48]	@ (8002484 <HAL_RCC_ClockConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d215      	bcs.n	800248c <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002460:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <HAL_RCC_ClockConfig+0x240>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f023 0207 	bic.w	r2, r3, #7
 8002468:	4906      	ldr	r1, [pc, #24]	@ (8002484 <HAL_RCC_ClockConfig+0x240>)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	4313      	orrs	r3, r2
 800246e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002470:	4b04      	ldr	r3, [pc, #16]	@ (8002484 <HAL_RCC_ClockConfig+0x240>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d006      	beq.n	800248c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e041      	b.n	8002506 <HAL_RCC_ClockConfig+0x2c2>
 8002482:	bf00      	nop
 8002484:	40022000 	.word	0x40022000
 8002488:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0304 	and.w	r3, r3, #4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002498:	4b1d      	ldr	r3, [pc, #116]	@ (8002510 <HAL_RCC_ClockConfig+0x2cc>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	491a      	ldr	r1, [pc, #104]	@ (8002510 <HAL_RCC_ClockConfig+0x2cc>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d009      	beq.n	80024ca <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024b6:	4b16      	ldr	r3, [pc, #88]	@ (8002510 <HAL_RCC_ClockConfig+0x2cc>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4912      	ldr	r1, [pc, #72]	@ (8002510 <HAL_RCC_ClockConfig+0x2cc>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024ca:	f000 f829 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024ce:	4601      	mov	r1, r0
 80024d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002510 <HAL_RCC_ClockConfig+0x2cc>)
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024d8:	22f0      	movs	r2, #240	@ 0xf0
 80024da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	fa92 f2a2 	rbit	r2, r2
 80024e2:	60fa      	str	r2, [r7, #12]
  return result;
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	fab2 f282 	clz	r2, r2
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	40d3      	lsrs	r3, r2
 80024ee:	4a09      	ldr	r2, [pc, #36]	@ (8002514 <HAL_RCC_ClockConfig+0x2d0>)
 80024f0:	5cd3      	ldrb	r3, [r2, r3]
 80024f2:	fa21 f303 	lsr.w	r3, r1, r3
 80024f6:	4a08      	ldr	r2, [pc, #32]	@ (8002518 <HAL_RCC_ClockConfig+0x2d4>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <HAL_RCC_ClockConfig+0x2d8>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f9b6 	bl	8000870 <HAL_InitTick>
  
  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3778      	adds	r7, #120	@ 0x78
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000
 8002514:	08002b64 	.word	0x08002b64
 8002518:	20000000 	.word	0x20000000
 800251c:	20000004 	.word	0x20000004

08002520 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]
 8002532:	2300      	movs	r3, #0
 8002534:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800253a:	4b1e      	ldr	r3, [pc, #120]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d002      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x30>
 800254a:	2b08      	cmp	r3, #8
 800254c:	d003      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x36>
 800254e:	e026      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002550:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002552:	613b      	str	r3, [r7, #16]
      break;
 8002554:	e026      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	0c9b      	lsrs	r3, r3, #18
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	4a17      	ldr	r2, [pc, #92]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002560:	5cd3      	ldrb	r3, [r2, r3]
 8002562:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002564:	4b13      	ldr	r3, [pc, #76]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	4a14      	ldr	r2, [pc, #80]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800257c:	4a0e      	ldr	r2, [pc, #56]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x98>)
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	fbb2 f2f3 	udiv	r2, r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	e004      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a0c      	ldr	r2, [pc, #48]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002592:	fb02 f303 	mul.w	r3, r2, r3
 8002596:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	613b      	str	r3, [r7, #16]
      break;
 800259c:	e002      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025a0:	613b      	str	r3, [r7, #16]
      break;
 80025a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a4:	693b      	ldr	r3, [r7, #16]
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000
 80025b8:	007a1200 	.word	0x007a1200
 80025bc:	08002b74 	.word	0x08002b74
 80025c0:	08002b84 	.word	0x08002b84
 80025c4:	003d0900 	.word	0x003d0900

080025c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b092      	sub	sp, #72	@ 0x48
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 80d2 	beq.w	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ec:	4b4d      	ldr	r3, [pc, #308]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10e      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f8:	4b4a      	ldr	r3, [pc, #296]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	4a49      	ldr	r2, [pc, #292]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002602:	61d3      	str	r3, [r2, #28]
 8002604:	4b47      	ldr	r3, [pc, #284]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002610:	2301      	movs	r3, #1
 8002612:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002616:	4b44      	ldr	r3, [pc, #272]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261e:	2b00      	cmp	r3, #0
 8002620:	d118      	bne.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4b41      	ldr	r3, [pc, #260]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a40      	ldr	r2, [pc, #256]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262e:	f7fe f963 	bl	80008f8 <HAL_GetTick>
 8002632:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	e008      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002636:	f7fe f95f 	bl	80008f8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b64      	cmp	r3, #100	@ 0x64
 8002642:	d901      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e167      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	4b37      	ldr	r3, [pc, #220]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f0      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002654:	4b33      	ldr	r3, [pc, #204]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800265c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800265e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8082 	beq.w	800276a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800266e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002670:	429a      	cmp	r2, r3
 8002672:	d07a      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002674:	4b2b      	ldr	r3, [pc, #172]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002676:	6a1b      	ldr	r3, [r3, #32]
 8002678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800267c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800267e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002682:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800268c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	461a      	mov	r2, r3
 8002696:	4b25      	ldr	r3, [pc, #148]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002698:	4413      	add	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	461a      	mov	r2, r3
 800269e:	2301      	movs	r3, #1
 80026a0:	6013      	str	r3, [r2, #0]
 80026a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b1c      	ldr	r3, [pc, #112]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	461a      	mov	r2, r3
 80026c2:	2300      	movs	r3, #0
 80026c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026c6:	4a17      	ldr	r2, [pc, #92]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80026c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ce:	f003 0301 	and.w	r3, r3, #1
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d049      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d6:	f7fe f90f 	bl	80008f8 <HAL_GetTick>
 80026da:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7fe f90b 	bl	80008f8 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e111      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x350>
 80026f4:	2302      	movs	r3, #2
 80026f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fa:	fa93 f3a3 	rbit	r3, r3
 80026fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002700:	2302      	movs	r3, #2
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	61fb      	str	r3, [r7, #28]
  return result;
 800270c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d108      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800271e:	4b01      	ldr	r3, [pc, #4]	@ (8002724 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	e00d      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002724:	40021000 	.word	0x40021000
 8002728:	40007000 	.word	0x40007000
 800272c:	10908100 	.word	0x10908100
 8002730:	2302      	movs	r3, #2
 8002732:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa93 f3a3 	rbit	r3, r3
 800273a:	617b      	str	r3, [r7, #20]
 800273c:	4b78      	ldr	r3, [pc, #480]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800273e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002740:	2202      	movs	r2, #2
 8002742:	613a      	str	r2, [r7, #16]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	fa92 f2a2 	rbit	r2, r2
 800274a:	60fa      	str	r2, [r7, #12]
  return result;
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	fab2 f282 	clz	r2, r2
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	f002 021f 	and.w	r2, r2, #31
 800275e:	2101      	movs	r1, #1
 8002760:	fa01 f202 	lsl.w	r2, r1, r2
 8002764:	4013      	ands	r3, r2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0b9      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800276a:	4b6d      	ldr	r3, [pc, #436]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	496a      	ldr	r1, [pc, #424]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002778:	4313      	orrs	r3, r2
 800277a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800277c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002784:	4b66      	ldr	r3, [pc, #408]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002786:	69db      	ldr	r3, [r3, #28]
 8002788:	4a65      	ldr	r2, [pc, #404]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800278a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d008      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800279c:	4b60      	ldr	r3, [pc, #384]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800279e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a0:	f023 0203 	bic.w	r2, r3, #3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	495d      	ldr	r1, [pc, #372]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d008      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027ba:	4b59      	ldr	r3, [pc, #356]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027be:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	4956      	ldr	r1, [pc, #344]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027d8:	4b51      	ldr	r3, [pc, #324]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	494e      	ldr	r1, [pc, #312]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0320 	and.w	r3, r3, #32
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d008      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f6:	4b4a      	ldr	r3, [pc, #296]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f023 0210 	bic.w	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4947      	ldr	r1, [pc, #284]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002804:	4313      	orrs	r3, r2
 8002806:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002814:	4b42      	ldr	r3, [pc, #264]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002820:	493f      	ldr	r1, [pc, #252]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002822:	4313      	orrs	r3, r2
 8002824:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800282e:	2b00      	cmp	r3, #0
 8002830:	d008      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002832:	4b3b      	ldr	r3, [pc, #236]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002836:	f023 0220 	bic.w	r2, r3, #32
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	4938      	ldr	r1, [pc, #224]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002840:	4313      	orrs	r3, r2
 8002842:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002850:	4b33      	ldr	r3, [pc, #204]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002854:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	4930      	ldr	r1, [pc, #192]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800285e:	4313      	orrs	r3, r2
 8002860:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0310 	and.w	r3, r3, #16
 800286a:	2b00      	cmp	r3, #0
 800286c:	d008      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800286e:	4b2c      	ldr	r3, [pc, #176]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	4929      	ldr	r1, [pc, #164]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800287c:	4313      	orrs	r3, r2
 800287e:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800288c:	4b24      	ldr	r3, [pc, #144]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002898:	4921      	ldr	r1, [pc, #132]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d008      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ae:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b6:	491a      	ldr	r1, [pc, #104]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028c8:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028cc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	4912      	ldr	r1, [pc, #72]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f2:	490b      	ldr	r1, [pc, #44]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d008      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002908:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002910:	4903      	ldr	r1, [pc, #12]	@ (8002920 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002912:	4313      	orrs	r3, r2
 8002914:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3748      	adds	r7, #72	@ 0x48
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40021000 	.word	0x40021000

08002924 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e09d      	b.n	8002a72 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002946:	d009      	beq.n	800295c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2200      	movs	r2, #0
 800294c:	61da      	str	r2, [r3, #28]
 800294e:	e005      	b.n	800295c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d106      	bne.n	800297c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7fd fe72 	bl	8000660 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002992:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800299c:	d902      	bls.n	80029a4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e002      	b.n	80029aa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029a8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029b2:	d007      	beq.n	80029c4 <HAL_SPI_Init+0xa0>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029bc:	d002      	beq.n	80029c4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	69db      	ldr	r3, [r3, #28]
 80029f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a06:	ea42 0103 	orr.w	r1, r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	0c1b      	lsrs	r3, r3, #16
 8002a20:	f003 0204 	and.w	r2, r3, #4
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	f003 0310 	and.w	r3, r3, #16
 8002a2c:	431a      	orrs	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a32:	f003 0308 	and.w	r3, r3, #8
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a40:	ea42 0103 	orr.w	r1, r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a82:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002a86:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	43db      	mvns	r3, r3
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	4013      	ands	r3, r2
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <memset>:
 8002aec:	4402      	add	r2, r0
 8002aee:	4603      	mov	r3, r0
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d100      	bne.n	8002af6 <memset+0xa>
 8002af4:	4770      	bx	lr
 8002af6:	f803 1b01 	strb.w	r1, [r3], #1
 8002afa:	e7f9      	b.n	8002af0 <memset+0x4>

08002afc <__libc_init_array>:
 8002afc:	b570      	push	{r4, r5, r6, lr}
 8002afe:	4d0d      	ldr	r5, [pc, #52]	@ (8002b34 <__libc_init_array+0x38>)
 8002b00:	4c0d      	ldr	r4, [pc, #52]	@ (8002b38 <__libc_init_array+0x3c>)
 8002b02:	1b64      	subs	r4, r4, r5
 8002b04:	10a4      	asrs	r4, r4, #2
 8002b06:	2600      	movs	r6, #0
 8002b08:	42a6      	cmp	r6, r4
 8002b0a:	d109      	bne.n	8002b20 <__libc_init_array+0x24>
 8002b0c:	4d0b      	ldr	r5, [pc, #44]	@ (8002b3c <__libc_init_array+0x40>)
 8002b0e:	4c0c      	ldr	r4, [pc, #48]	@ (8002b40 <__libc_init_array+0x44>)
 8002b10:	f000 f818 	bl	8002b44 <_init>
 8002b14:	1b64      	subs	r4, r4, r5
 8002b16:	10a4      	asrs	r4, r4, #2
 8002b18:	2600      	movs	r6, #0
 8002b1a:	42a6      	cmp	r6, r4
 8002b1c:	d105      	bne.n	8002b2a <__libc_init_array+0x2e>
 8002b1e:	bd70      	pop	{r4, r5, r6, pc}
 8002b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b24:	4798      	blx	r3
 8002b26:	3601      	adds	r6, #1
 8002b28:	e7ee      	b.n	8002b08 <__libc_init_array+0xc>
 8002b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2e:	4798      	blx	r3
 8002b30:	3601      	adds	r6, #1
 8002b32:	e7f2      	b.n	8002b1a <__libc_init_array+0x1e>
 8002b34:	08002b94 	.word	0x08002b94
 8002b38:	08002b94 	.word	0x08002b94
 8002b3c:	08002b94 	.word	0x08002b94
 8002b40:	08002b98 	.word	0x08002b98

08002b44 <_init>:
 8002b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b46:	bf00      	nop
 8002b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4a:	bc08      	pop	{r3}
 8002b4c:	469e      	mov	lr, r3
 8002b4e:	4770      	bx	lr

08002b50 <_fini>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	bf00      	nop
 8002b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b56:	bc08      	pop	{r3}
 8002b58:	469e      	mov	lr, r3
 8002b5a:	4770      	bx	lr
