
Schedueler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002b60  08002b60  00003b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b90  08002b90  00004014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002b90  08002b90  00004014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002b90  08002b90  00004014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b90  08002b90  00003b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b94  08002b94  00003b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08002b98  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004014  2**0
                  CONTENTS
 10 .bss          000003b8  20000014  20000014  00004014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003cc  200003cc  00004014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cc5b  00000000  00000000  00004044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f80  00000000  00000000  00010c9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b68  00000000  00000000  00012c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008b5  00000000  00000000  00013788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cd81  00000000  00000000  0001403d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f615  00000000  00000000  00030dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab469  00000000  00000000  000403d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000eb83c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ed0  00000000  00000000  000eb880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000ee750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b48 	.word	0x08002b48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002b48 	.word	0x08002b48

080001c8 <blinkLed1>:
TaskSelection taskList[] = {blinkLed1, blinkLed2};
#define No_TASKS	(sizeof(taskList) / sizeof(TaskSelection));
uint8_t currentTask = 0;

/* -------------------------- FUNCTION TO BLINK LED 1 -------------------------- */
void blinkLed1(void){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
	static uint32_t lastTick = 0;

	if(HAL_GetTick()-lastTick >= 200){
 80001cc:	f000 fb96 	bl	80008fc <HAL_GetTick>
 80001d0:	4602      	mov	r2, r0
 80001d2:	4b08      	ldr	r3, [pc, #32]	@ (80001f4 <blinkLed1+0x2c>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	1ad3      	subs	r3, r2, r3
 80001d8:	2bc7      	cmp	r3, #199	@ 0xc7
 80001da:	d909      	bls.n	80001f0 <blinkLed1+0x28>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_8);
 80001dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001e0:	4805      	ldr	r0, [pc, #20]	@ (80001f8 <blinkLed1+0x30>)
 80001e2:	f000 fe0f 	bl	8000e04 <HAL_GPIO_TogglePin>
		lastTick = HAL_GetTick();
 80001e6:	f000 fb89 	bl	80008fc <HAL_GetTick>
 80001ea:	4603      	mov	r3, r0
 80001ec:	4a01      	ldr	r2, [pc, #4]	@ (80001f4 <blinkLed1+0x2c>)
 80001ee:	6013      	str	r3, [r2, #0]
	}
}
 80001f0:	bf00      	nop
 80001f2:	bd80      	pop	{r7, pc}
 80001f4:	20000034 	.word	0x20000034
 80001f8:	48001000 	.word	0x48001000

080001fc <blinkLed2>:

/* -------------------------- FUNCTION TO BLINK LED 2 -------------------------- */
void blinkLed2(void){
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	static uint32_t lastTick = 0;

	if(HAL_GetTick()-lastTick >= 1000){
 8000200:	f000 fb7c 	bl	80008fc <HAL_GetTick>
 8000204:	4602      	mov	r2, r0
 8000206:	4b09      	ldr	r3, [pc, #36]	@ (800022c <blinkLed2+0x30>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	1ad3      	subs	r3, r2, r3
 800020c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000210:	d309      	bcc.n	8000226 <blinkLed2+0x2a>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_9);
 8000212:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000216:	4806      	ldr	r0, [pc, #24]	@ (8000230 <blinkLed2+0x34>)
 8000218:	f000 fdf4 	bl	8000e04 <HAL_GPIO_TogglePin>
		lastTick = HAL_GetTick();
 800021c:	f000 fb6e 	bl	80008fc <HAL_GetTick>
 8000220:	4603      	mov	r3, r0
 8000222:	4a02      	ldr	r2, [pc, #8]	@ (800022c <blinkLed2+0x30>)
 8000224:	6013      	str	r3, [r2, #0]
	}
}
 8000226:	bf00      	nop
 8000228:	bd80      	pop	{r7, pc}
 800022a:	bf00      	nop
 800022c:	20000038 	.word	0x20000038
 8000230:	48001000 	.word	0x48001000

08000234 <dispatch>:

/* --------------------------------- DISPATCHER --------------------------------- */
void dispatch(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	taskList[currentTask]();
 8000238:	4b08      	ldr	r3, [pc, #32]	@ (800025c <dispatch+0x28>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	461a      	mov	r2, r3
 800023e:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <dispatch+0x2c>)
 8000240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000244:	4798      	blx	r3
	currentTask = (currentTask + 1) % No_TASKS;
 8000246:	4b05      	ldr	r3, [pc, #20]	@ (800025c <dispatch+0x28>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	3301      	adds	r3, #1
 800024c:	b2db      	uxtb	r3, r3
 800024e:	f003 0301 	and.w	r3, r3, #1
 8000252:	b2da      	uxtb	r2, r3
 8000254:	4b01      	ldr	r3, [pc, #4]	@ (800025c <dispatch+0x28>)
 8000256:	701a      	strb	r2, [r3, #0]
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000030 	.word	0x20000030
 8000260:	20000000 	.word	0x20000000

08000264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000268:	f000 faee 	bl	8000848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026c:	f000 f80c 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000270:	f000 f90c 	bl	800048c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000274:	f000 f86a 	bl	800034c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000278:	f000 f8a8 	bl	80003cc <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800027c:	f000 f8e4 	bl	8000448 <MX_USB_PCD_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  dispatch();
 8000280:	f7ff ffd8 	bl	8000234 <dispatch>
 8000284:	e7fc      	b.n	8000280 <main+0x1c>
	...

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b09e      	sub	sp, #120	@ 0x78
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000292:	2228      	movs	r2, #40	@ 0x28
 8000294:	2100      	movs	r1, #0
 8000296:	4618      	mov	r0, r3
 8000298:	f002 fc2a 	bl	8002af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80002a0:	2200      	movs	r2, #0
 80002a2:	601a      	str	r2, [r3, #0]
 80002a4:	605a      	str	r2, [r3, #4]
 80002a6:	609a      	str	r2, [r3, #8]
 80002a8:	60da      	str	r2, [r3, #12]
 80002aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ac:	463b      	mov	r3, r7
 80002ae:	223c      	movs	r2, #60	@ 0x3c
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 fc1c 	bl	8002af0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80002b8:	2303      	movs	r3, #3
 80002ba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80002bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80002c0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ce:	2302      	movs	r3, #2
 80002d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80002dc:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80002e2:	4618      	mov	r0, r3
 80002e4:	f000 ffa2 	bl	800122c <HAL_RCC_OscConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ee:	f000 f94b 	bl	8000588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f2:	230f      	movs	r3, #15
 80002f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f6:	2302      	movs	r3, #2
 80002f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000302:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000304:	2300      	movs	r3, #0
 8000306:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000308:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800030c:	2101      	movs	r1, #1
 800030e:	4618      	mov	r0, r3
 8000310:	f001 ff9a 	bl	8002248 <HAL_RCC_ClockConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800031a:	f000 f935 	bl	8000588 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 800031e:	4b0a      	ldr	r3, [pc, #40]	@ (8000348 <SystemClock_Config+0xc0>)
 8000320:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000322:	2300      	movs	r3, #0
 8000324:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 8000326:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800032a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800032c:	463b      	mov	r3, r7
 800032e:	4618      	mov	r0, r3
 8000330:	f002 f94c 	bl	80025cc <HAL_RCCEx_PeriphCLKConfig>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800033a:	f000 f925 	bl	8000588 <Error_Handler>
  }
}
 800033e:	bf00      	nop
 8000340:	3778      	adds	r7, #120	@ 0x78
 8000342:	46bd      	mov	sp, r7
 8000344:	bd80      	pop	{r7, pc}
 8000346:	bf00      	nop
 8000348:	00020020 	.word	0x00020020

0800034c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000350:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000352:	4a1c      	ldr	r2, [pc, #112]	@ (80003c4 <MX_I2C1_Init+0x78>)
 8000354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000356:	4b1a      	ldr	r3, [pc, #104]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000358:	4a1b      	ldr	r2, [pc, #108]	@ (80003c8 <MX_I2C1_Init+0x7c>)
 800035a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800035c:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000362:	4b17      	ldr	r3, [pc, #92]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000364:	2201      	movs	r2, #1
 8000366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000368:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800036a:	2200      	movs	r2, #0
 800036c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800036e:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000370:	2200      	movs	r2, #0
 8000372:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000374:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000376:	2200      	movs	r2, #0
 8000378:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800037a:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800037c:	2200      	movs	r2, #0
 800037e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000380:	4b0f      	ldr	r3, [pc, #60]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000382:	2200      	movs	r2, #0
 8000384:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000386:	480e      	ldr	r0, [pc, #56]	@ (80003c0 <MX_I2C1_Init+0x74>)
 8000388:	f000 fd56 	bl	8000e38 <HAL_I2C_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000392:	f000 f8f9 	bl	8000588 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000396:	2100      	movs	r1, #0
 8000398:	4809      	ldr	r0, [pc, #36]	@ (80003c0 <MX_I2C1_Init+0x74>)
 800039a:	f000 fde8 	bl	8000f6e <HAL_I2CEx_ConfigAnalogFilter>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d001      	beq.n	80003a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003a4:	f000 f8f0 	bl	8000588 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a8:	2100      	movs	r1, #0
 80003aa:	4805      	ldr	r0, [pc, #20]	@ (80003c0 <MX_I2C1_Init+0x74>)
 80003ac:	f000 fe2a 	bl	8001004 <HAL_I2CEx_ConfigDigitalFilter>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003b6:	f000 f8e7 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	2000003c 	.word	0x2000003c
 80003c4:	40005400 	.word	0x40005400
 80003c8:	2000090e 	.word	0x2000090e

080003cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80003d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000444 <MX_SPI1_Init+0x78>)
 80003d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80003dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003de:	4b18      	ldr	r3, [pc, #96]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80003e4:	4b16      	ldr	r3, [pc, #88]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003e6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80003ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003f2:	4b13      	ldr	r3, [pc, #76]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <MX_SPI1_Init+0x74>)
 80003fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000400:	4b0f      	ldr	r3, [pc, #60]	@ (8000440 <MX_SPI1_Init+0x74>)
 8000402:	2208      	movs	r2, #8
 8000404:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000406:	4b0e      	ldr	r3, [pc, #56]	@ (8000440 <MX_SPI1_Init+0x74>)
 8000408:	2200      	movs	r2, #0
 800040a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800040c:	4b0c      	ldr	r3, [pc, #48]	@ (8000440 <MX_SPI1_Init+0x74>)
 800040e:	2200      	movs	r2, #0
 8000410:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000412:	4b0b      	ldr	r3, [pc, #44]	@ (8000440 <MX_SPI1_Init+0x74>)
 8000414:	2200      	movs	r2, #0
 8000416:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000418:	4b09      	ldr	r3, [pc, #36]	@ (8000440 <MX_SPI1_Init+0x74>)
 800041a:	2207      	movs	r2, #7
 800041c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800041e:	4b08      	ldr	r3, [pc, #32]	@ (8000440 <MX_SPI1_Init+0x74>)
 8000420:	2200      	movs	r2, #0
 8000422:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <MX_SPI1_Init+0x74>)
 8000426:	2208      	movs	r2, #8
 8000428:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800042a:	4805      	ldr	r0, [pc, #20]	@ (8000440 <MX_SPI1_Init+0x74>)
 800042c:	f002 fa7c 	bl	8002928 <HAL_SPI_Init>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000436:	f000 f8a7 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	20000090 	.word	0x20000090
 8000444:	40013000 	.word	0x40013000

08000448 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800044c:	4b0d      	ldr	r3, [pc, #52]	@ (8000484 <MX_USB_PCD_Init+0x3c>)
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <MX_USB_PCD_Init+0x40>)
 8000450:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000452:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <MX_USB_PCD_Init+0x3c>)
 8000454:	2208      	movs	r2, #8
 8000456:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000458:	4b0a      	ldr	r3, [pc, #40]	@ (8000484 <MX_USB_PCD_Init+0x3c>)
 800045a:	2202      	movs	r2, #2
 800045c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800045e:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <MX_USB_PCD_Init+0x3c>)
 8000460:	2202      	movs	r2, #2
 8000462:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000464:	4b07      	ldr	r3, [pc, #28]	@ (8000484 <MX_USB_PCD_Init+0x3c>)
 8000466:	2200      	movs	r2, #0
 8000468:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_USB_PCD_Init+0x3c>)
 800046c:	2200      	movs	r2, #0
 800046e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000470:	4804      	ldr	r0, [pc, #16]	@ (8000484 <MX_USB_PCD_Init+0x3c>)
 8000472:	f000 fe13 	bl	800109c <HAL_PCD_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800047c:	f000 f884 	bl	8000588 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000480:	bf00      	nop
 8000482:	bd80      	pop	{r7, pc}
 8000484:	200000f4 	.word	0x200000f4
 8000488:	40005c00 	.word	0x40005c00

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08a      	sub	sp, #40	@ 0x28
 8000490:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	f107 0314 	add.w	r3, r7, #20
 8000496:	2200      	movs	r2, #0
 8000498:	601a      	str	r2, [r3, #0]
 800049a:	605a      	str	r2, [r3, #4]
 800049c:	609a      	str	r2, [r3, #8]
 800049e:	60da      	str	r2, [r3, #12]
 80004a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004a2:	4b37      	ldr	r3, [pc, #220]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004a4:	695b      	ldr	r3, [r3, #20]
 80004a6:	4a36      	ldr	r2, [pc, #216]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80004ac:	6153      	str	r3, [r2, #20]
 80004ae:	4b34      	ldr	r3, [pc, #208]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004b0:	695b      	ldr	r3, [r3, #20]
 80004b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80004b6:	613b      	str	r3, [r7, #16]
 80004b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ba:	4b31      	ldr	r3, [pc, #196]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004bc:	695b      	ldr	r3, [r3, #20]
 80004be:	4a30      	ldr	r2, [pc, #192]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004c4:	6153      	str	r3, [r2, #20]
 80004c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004d2:	4b2b      	ldr	r3, [pc, #172]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004d4:	695b      	ldr	r3, [r3, #20]
 80004d6:	4a2a      	ldr	r2, [pc, #168]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80004dc:	6153      	str	r3, [r2, #20]
 80004de:	4b28      	ldr	r3, [pc, #160]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80004e6:	60bb      	str	r3, [r7, #8]
 80004e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ea:	4b25      	ldr	r3, [pc, #148]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004ec:	695b      	ldr	r3, [r3, #20]
 80004ee:	4a24      	ldr	r2, [pc, #144]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f4:	6153      	str	r3, [r2, #20]
 80004f6:	4b22      	ldr	r3, [pc, #136]	@ (8000580 <MX_GPIO_Init+0xf4>)
 80004f8:	695b      	ldr	r3, [r3, #20]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000502:	4b1f      	ldr	r3, [pc, #124]	@ (8000580 <MX_GPIO_Init+0xf4>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a1e      	ldr	r2, [pc, #120]	@ (8000580 <MX_GPIO_Init+0xf4>)
 8000508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <MX_GPIO_Init+0xf4>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800051a:	2200      	movs	r2, #0
 800051c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000520:	4818      	ldr	r0, [pc, #96]	@ (8000584 <MX_GPIO_Init+0xf8>)
 8000522:	f000 fc57 	bl	8000dd4 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000526:	2337      	movs	r3, #55	@ 0x37
 8000528:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800052a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800052e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000530:	2300      	movs	r3, #0
 8000532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	4812      	ldr	r0, [pc, #72]	@ (8000584 <MX_GPIO_Init+0xf8>)
 800053c:	f000 fad0 	bl	8000ae0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000540:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000544:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000546:	2301      	movs	r3, #1
 8000548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054e:	2300      	movs	r3, #0
 8000550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	480a      	ldr	r0, [pc, #40]	@ (8000584 <MX_GPIO_Init+0xf8>)
 800055a:	f000 fac1 	bl	8000ae0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800055e:	2301      	movs	r3, #1
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000562:	2300      	movs	r3, #0
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800056a:	f107 0314 	add.w	r3, r7, #20
 800056e:	4619      	mov	r1, r3
 8000570:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000574:	f000 fab4 	bl	8000ae0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000578:	bf00      	nop
 800057a:	3728      	adds	r7, #40	@ 0x28
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40021000 	.word	0x40021000
 8000584:	48001000 	.word	0x48001000

08000588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <Error_Handler+0x8>

08000594 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800059a:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <HAL_MspInit+0x44>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	4a0e      	ldr	r2, [pc, #56]	@ (80005d8 <HAL_MspInit+0x44>)
 80005a0:	f043 0301 	orr.w	r3, r3, #1
 80005a4:	6193      	str	r3, [r2, #24]
 80005a6:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <HAL_MspInit+0x44>)
 80005a8:	699b      	ldr	r3, [r3, #24]
 80005aa:	f003 0301 	and.w	r3, r3, #1
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b2:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <HAL_MspInit+0x44>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	4a08      	ldr	r2, [pc, #32]	@ (80005d8 <HAL_MspInit+0x44>)
 80005b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	61d3      	str	r3, [r2, #28]
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <HAL_MspInit+0x44>)
 80005c0:	69db      	ldr	r3, [r3, #28]
 80005c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005c6:	603b      	str	r3, [r7, #0]
 80005c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005ca:	2007      	movs	r0, #7
 80005cc:	f000 fa54 	bl	8000a78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000

080005dc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a17      	ldr	r2, [pc, #92]	@ (8000658 <HAL_I2C_MspInit+0x7c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d127      	bne.n	800064e <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005fe:	4b17      	ldr	r3, [pc, #92]	@ (800065c <HAL_I2C_MspInit+0x80>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a16      	ldr	r2, [pc, #88]	@ (800065c <HAL_I2C_MspInit+0x80>)
 8000604:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <HAL_I2C_MspInit+0x80>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000616:	23c0      	movs	r3, #192	@ 0xc0
 8000618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800061a:	2312      	movs	r3, #18
 800061c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800061e:	2301      	movs	r3, #1
 8000620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000622:	2303      	movs	r3, #3
 8000624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000626:	2304      	movs	r3, #4
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <HAL_I2C_MspInit+0x84>)
 8000632:	f000 fa55 	bl	8000ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <HAL_I2C_MspInit+0x80>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a08      	ldr	r2, [pc, #32]	@ (800065c <HAL_I2C_MspInit+0x80>)
 800063c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b06      	ldr	r3, [pc, #24]	@ (800065c <HAL_I2C_MspInit+0x80>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800064e:	bf00      	nop
 8000650:	3728      	adds	r7, #40	@ 0x28
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	40005400 	.word	0x40005400
 800065c:	40021000 	.word	0x40021000
 8000660:	48000400 	.word	0x48000400

08000664 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	@ 0x28
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a17      	ldr	r2, [pc, #92]	@ (80006e0 <HAL_SPI_MspInit+0x7c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d128      	bne.n	80006d8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <HAL_SPI_MspInit+0x80>)
 8000688:	699b      	ldr	r3, [r3, #24]
 800068a:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <HAL_SPI_MspInit+0x80>)
 800068c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000690:	6193      	str	r3, [r2, #24]
 8000692:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <HAL_SPI_MspInit+0x80>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <HAL_SPI_MspInit+0x80>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a10      	ldr	r2, [pc, #64]	@ (80006e4 <HAL_SPI_MspInit+0x80>)
 80006a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b0e      	ldr	r3, [pc, #56]	@ (80006e4 <HAL_SPI_MspInit+0x80>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80006b6:	23e0      	movs	r3, #224	@ 0xe0
 80006b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ba:	2302      	movs	r3, #2
 80006bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006be:	2300      	movs	r3, #0
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006c6:	2305      	movs	r3, #5
 80006c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d4:	f000 fa04 	bl	8000ae0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80006d8:	bf00      	nop
 80006da:	3728      	adds	r7, #40	@ 0x28
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40013000 	.word	0x40013000
 80006e4:	40021000 	.word	0x40021000

080006e8 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08a      	sub	sp, #40	@ 0x28
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a18      	ldr	r2, [pc, #96]	@ (8000768 <HAL_PCD_MspInit+0x80>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d129      	bne.n	800075e <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <HAL_PCD_MspInit+0x84>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a17      	ldr	r2, [pc, #92]	@ (800076c <HAL_PCD_MspInit+0x84>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <HAL_PCD_MspInit+0x84>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8000722:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000728:	2302      	movs	r3, #2
 800072a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000730:	2303      	movs	r3, #3
 8000732:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8000734:	230e      	movs	r3, #14
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4619      	mov	r1, r3
 800073e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000742:	f000 f9cd 	bl	8000ae0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8000746:	4b09      	ldr	r3, [pc, #36]	@ (800076c <HAL_PCD_MspInit+0x84>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	4a08      	ldr	r2, [pc, #32]	@ (800076c <HAL_PCD_MspInit+0x84>)
 800074c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000750:	61d3      	str	r3, [r2, #28]
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <HAL_PCD_MspInit+0x84>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 800075e:	bf00      	nop
 8000760:	3728      	adds	r7, #40	@ 0x28
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40005c00 	.word	0x40005c00
 800076c:	40021000 	.word	0x40021000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <MemManage_Handler+0x4>

08000788 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <UsageFault_Handler+0x4>

08000798 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr

080007c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c6:	f000 f885 	bl	80008d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007d4:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <SystemInit+0x20>)
 80007d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007da:	4a05      	ldr	r2, [pc, #20]	@ (80007f0 <SystemInit+0x20>)
 80007dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000ed00 	.word	0xe000ed00

080007f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800082c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f8:	f7ff ffea 	bl	80007d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007fc:	480c      	ldr	r0, [pc, #48]	@ (8000830 <LoopForever+0x6>)
  ldr r1, =_edata
 80007fe:	490d      	ldr	r1, [pc, #52]	@ (8000834 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000800:	4a0d      	ldr	r2, [pc, #52]	@ (8000838 <LoopForever+0xe>)
  movs r3, #0
 8000802:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000804:	e002      	b.n	800080c <LoopCopyDataInit>

08000806 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000806:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000808:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080a:	3304      	adds	r3, #4

0800080c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800080c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000810:	d3f9      	bcc.n	8000806 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000812:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000814:	4c0a      	ldr	r4, [pc, #40]	@ (8000840 <LoopForever+0x16>)
  movs r3, #0
 8000816:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000818:	e001      	b.n	800081e <LoopFillZerobss>

0800081a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800081c:	3204      	adds	r2, #4

0800081e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000820:	d3fb      	bcc.n	800081a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000822:	f002 f96d 	bl	8002b00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000826:	f7ff fd1d 	bl	8000264 <main>

0800082a <LoopForever>:

LoopForever:
    b LoopForever
 800082a:	e7fe      	b.n	800082a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800082c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000834:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000838:	08002b98 	.word	0x08002b98
  ldr r2, =_sbss
 800083c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000840:	200003cc 	.word	0x200003cc

08000844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000844:	e7fe      	b.n	8000844 <ADC1_2_IRQHandler>
	...

08000848 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800084c:	4b08      	ldr	r3, [pc, #32]	@ (8000870 <HAL_Init+0x28>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a07      	ldr	r2, [pc, #28]	@ (8000870 <HAL_Init+0x28>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000858:	2003      	movs	r0, #3
 800085a:	f000 f90d 	bl	8000a78 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800085e:	2000      	movs	r0, #0
 8000860:	f000 f808 	bl	8000874 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000864:	f7ff fe96 	bl	8000594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	40022000 	.word	0x40022000

08000874 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800087c:	4b12      	ldr	r3, [pc, #72]	@ (80008c8 <HAL_InitTick+0x54>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <HAL_InitTick+0x58>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	4619      	mov	r1, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088a:	fbb3 f3f1 	udiv	r3, r3, r1
 800088e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000892:	4618      	mov	r0, r3
 8000894:	f000 f917 	bl	8000ac6 <HAL_SYSTICK_Config>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800089e:	2301      	movs	r3, #1
 80008a0:	e00e      	b.n	80008c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2b0f      	cmp	r3, #15
 80008a6:	d80a      	bhi.n	80008be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a8:	2200      	movs	r2, #0
 80008aa:	6879      	ldr	r1, [r7, #4]
 80008ac:	f04f 30ff 	mov.w	r0, #4294967295
 80008b0:	f000 f8ed 	bl	8000a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008b4:	4a06      	ldr	r2, [pc, #24]	@ (80008d0 <HAL_InitTick+0x5c>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000008 	.word	0x20000008
 80008cc:	20000010 	.word	0x20000010
 80008d0:	2000000c 	.word	0x2000000c

080008d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <HAL_IncTick+0x20>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <HAL_IncTick+0x24>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4413      	add	r3, r2
 80008e4:	4a04      	ldr	r2, [pc, #16]	@ (80008f8 <HAL_IncTick+0x24>)
 80008e6:	6013      	str	r3, [r2, #0]
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000010 	.word	0x20000010
 80008f8:	200003c8 	.word	0x200003c8

080008fc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000900:	4b03      	ldr	r3, [pc, #12]	@ (8000910 <HAL_GetTick+0x14>)
 8000902:	681b      	ldr	r3, [r3, #0]
}
 8000904:	4618      	mov	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	200003c8 	.word	0x200003c8

08000914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000924:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800092a:	68ba      	ldr	r2, [r7, #8]
 800092c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800093c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000940:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000946:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <__NVIC_SetPriorityGrouping+0x44>)
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	60d3      	str	r3, [r2, #12]
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000960:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <__NVIC_GetPriorityGrouping+0x18>)
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	f003 0307 	and.w	r3, r3, #7
}
 800096a:	4618      	mov	r0, r3
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	6039      	str	r1, [r7, #0]
 8000982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000988:	2b00      	cmp	r3, #0
 800098a:	db0a      	blt.n	80009a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490c      	ldr	r1, [pc, #48]	@ (80009c4 <__NVIC_SetPriority+0x4c>)
 8000992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000996:	0112      	lsls	r2, r2, #4
 8000998:	b2d2      	uxtb	r2, r2
 800099a:	440b      	add	r3, r1
 800099c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009a0:	e00a      	b.n	80009b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4908      	ldr	r1, [pc, #32]	@ (80009c8 <__NVIC_SetPriority+0x50>)
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	f003 030f 	and.w	r3, r3, #15
 80009ae:	3b04      	subs	r3, #4
 80009b0:	0112      	lsls	r2, r2, #4
 80009b2:	b2d2      	uxtb	r2, r2
 80009b4:	440b      	add	r3, r1
 80009b6:	761a      	strb	r2, [r3, #24]
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	e000e100 	.word	0xe000e100
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b089      	sub	sp, #36	@ 0x24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	60b9      	str	r1, [r7, #8]
 80009d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	f003 0307 	and.w	r3, r3, #7
 80009de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e0:	69fb      	ldr	r3, [r7, #28]
 80009e2:	f1c3 0307 	rsb	r3, r3, #7
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	bf28      	it	cs
 80009ea:	2304      	movcs	r3, #4
 80009ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	3304      	adds	r3, #4
 80009f2:	2b06      	cmp	r3, #6
 80009f4:	d902      	bls.n	80009fc <NVIC_EncodePriority+0x30>
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	3b03      	subs	r3, #3
 80009fa:	e000      	b.n	80009fe <NVIC_EncodePriority+0x32>
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	f04f 32ff 	mov.w	r2, #4294967295
 8000a04:	69bb      	ldr	r3, [r7, #24]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	43da      	mvns	r2, r3
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	401a      	ands	r2, r3
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1e:	43d9      	mvns	r1, r3
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a24:	4313      	orrs	r3, r2
         );
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3724      	adds	r7, #36	@ 0x24
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a44:	d301      	bcc.n	8000a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a46:	2301      	movs	r3, #1
 8000a48:	e00f      	b.n	8000a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a74 <SysTick_Config+0x40>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a52:	210f      	movs	r1, #15
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f7ff ff8e 	bl	8000978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <SysTick_Config+0x40>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a62:	4b04      	ldr	r3, [pc, #16]	@ (8000a74 <SysTick_Config+0x40>)
 8000a64:	2207      	movs	r2, #7
 8000a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	e000e010 	.word	0xe000e010

08000a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f7ff ff47 	bl	8000914 <__NVIC_SetPriorityGrouping>
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	4603      	mov	r3, r0
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
 8000a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aa0:	f7ff ff5c 	bl	800095c <__NVIC_GetPriorityGrouping>
 8000aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aa6:	687a      	ldr	r2, [r7, #4]
 8000aa8:	68b9      	ldr	r1, [r7, #8]
 8000aaa:	6978      	ldr	r0, [r7, #20]
 8000aac:	f7ff ff8e 	bl	80009cc <NVIC_EncodePriority>
 8000ab0:	4602      	mov	r2, r0
 8000ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f7ff ff5d 	bl	8000978 <__NVIC_SetPriority>
}
 8000abe:	bf00      	nop
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b082      	sub	sp, #8
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f7ff ffb0 	bl	8000a34 <SysTick_Config>
 8000ad4:	4603      	mov	r3, r0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
	...

08000ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b087      	sub	sp, #28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aee:	e154      	b.n	8000d9a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	681a      	ldr	r2, [r3, #0]
 8000af4:	2101      	movs	r1, #1
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	4013      	ands	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	f000 8146 	beq.w	8000d94 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f003 0303 	and.w	r3, r3, #3
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d005      	beq.n	8000b20 <HAL_GPIO_Init+0x40>
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 0303 	and.w	r3, r3, #3
 8000b1c:	2b02      	cmp	r3, #2
 8000b1e:	d130      	bne.n	8000b82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	689b      	ldr	r3, [r3, #8]
 8000b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	2203      	movs	r2, #3
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68da      	ldr	r2, [r3, #12]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	693a      	ldr	r2, [r7, #16]
 8000b4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000b56:	2201      	movs	r2, #1
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	4013      	ands	r3, r2
 8000b64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	091b      	lsrs	r3, r3, #4
 8000b6c:	f003 0201 	and.w	r2, r3, #1
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa02 f303 	lsl.w	r3, r2, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	685b      	ldr	r3, [r3, #4]
 8000b86:	f003 0303 	and.w	r3, r3, #3
 8000b8a:	2b03      	cmp	r3, #3
 8000b8c:	d017      	beq.n	8000bbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68db      	ldr	r3, [r3, #12]
 8000b92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	2203      	movs	r2, #3
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	689a      	ldr	r2, [r3, #8]
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0303 	and.w	r3, r3, #3
 8000bc6:	2b02      	cmp	r3, #2
 8000bc8:	d123      	bne.n	8000c12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	08da      	lsrs	r2, r3, #3
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	3208      	adds	r2, #8
 8000bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	220f      	movs	r2, #15
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	691a      	ldr	r2, [r3, #16]
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f003 0307 	and.w	r3, r3, #7
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	08da      	lsrs	r2, r3, #3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3208      	adds	r2, #8
 8000c0c:	6939      	ldr	r1, [r7, #16]
 8000c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f003 0203 	and.w	r2, r3, #3
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f000 80a0 	beq.w	8000d94 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c54:	4b58      	ldr	r3, [pc, #352]	@ (8000db8 <HAL_GPIO_Init+0x2d8>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a57      	ldr	r2, [pc, #348]	@ (8000db8 <HAL_GPIO_Init+0x2d8>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b55      	ldr	r3, [pc, #340]	@ (8000db8 <HAL_GPIO_Init+0x2d8>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0301 	and.w	r3, r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c6c:	4a53      	ldr	r2, [pc, #332]	@ (8000dbc <HAL_GPIO_Init+0x2dc>)
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	3302      	adds	r3, #2
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	220f      	movs	r2, #15
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000c96:	d019      	beq.n	8000ccc <HAL_GPIO_Init+0x1ec>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a49      	ldr	r2, [pc, #292]	@ (8000dc0 <HAL_GPIO_Init+0x2e0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d013      	beq.n	8000cc8 <HAL_GPIO_Init+0x1e8>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a48      	ldr	r2, [pc, #288]	@ (8000dc4 <HAL_GPIO_Init+0x2e4>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d00d      	beq.n	8000cc4 <HAL_GPIO_Init+0x1e4>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4a47      	ldr	r2, [pc, #284]	@ (8000dc8 <HAL_GPIO_Init+0x2e8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d007      	beq.n	8000cc0 <HAL_GPIO_Init+0x1e0>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a46      	ldr	r2, [pc, #280]	@ (8000dcc <HAL_GPIO_Init+0x2ec>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d101      	bne.n	8000cbc <HAL_GPIO_Init+0x1dc>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	e008      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cbc:	2305      	movs	r3, #5
 8000cbe:	e006      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e004      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	e002      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <HAL_GPIO_Init+0x1ee>
 8000ccc:	2300      	movs	r3, #0
 8000cce:	697a      	ldr	r2, [r7, #20]
 8000cd0:	f002 0203 	and.w	r2, r2, #3
 8000cd4:	0092      	lsls	r2, r2, #2
 8000cd6:	4093      	lsls	r3, r2
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000cde:	4937      	ldr	r1, [pc, #220]	@ (8000dbc <HAL_GPIO_Init+0x2dc>)
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cec:	4b38      	ldr	r3, [pc, #224]	@ (8000dd0 <HAL_GPIO_Init+0x2f0>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d10:	4a2f      	ldr	r2, [pc, #188]	@ (8000dd0 <HAL_GPIO_Init+0x2f0>)
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d16:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd0 <HAL_GPIO_Init+0x2f0>)
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d3a:	4a25      	ldr	r2, [pc, #148]	@ (8000dd0 <HAL_GPIO_Init+0x2f0>)
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000d40:	4b23      	ldr	r3, [pc, #140]	@ (8000dd0 <HAL_GPIO_Init+0x2f0>)
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	693a      	ldr	r2, [r7, #16]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d003      	beq.n	8000d64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000d5c:	693a      	ldr	r2, [r7, #16]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d64:	4a1a      	ldr	r2, [pc, #104]	@ (8000dd0 <HAL_GPIO_Init+0x2f0>)
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <HAL_GPIO_Init+0x2f0>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4013      	ands	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d8e:	4a10      	ldr	r2, [pc, #64]	@ (8000dd0 <HAL_GPIO_Init+0x2f0>)
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	3301      	adds	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	fa22 f303 	lsr.w	r3, r2, r3
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f47f aea3 	bne.w	8000af0 <HAL_GPIO_Init+0x10>
  }
}
 8000daa:	bf00      	nop
 8000dac:	bf00      	nop
 8000dae:	371c      	adds	r7, #28
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40010000 	.word	0x40010000
 8000dc0:	48000400 	.word	0x48000400
 8000dc4:	48000800 	.word	0x48000800
 8000dc8:	48000c00 	.word	0x48000c00
 8000dcc:	48001000 	.word	0x48001000
 8000dd0:	40010400 	.word	0x40010400

08000dd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]
 8000de0:	4613      	mov	r3, r2
 8000de2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000de4:	787b      	ldrb	r3, [r7, #1]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000dea:	887a      	ldrh	r2, [r7, #2]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000df0:	e002      	b.n	8000df8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000df2:	887a      	ldrh	r2, [r7, #2]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	041a      	lsls	r2, r3, #16
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	43d9      	mvns	r1, r3
 8000e22:	887b      	ldrh	r3, [r7, #2]
 8000e24:	400b      	ands	r3, r1
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	619a      	str	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d101      	bne.n	8000e4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	e08d      	b.n	8000f66 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d106      	bne.n	8000e64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fbbc 	bl	80005dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2224      	movs	r2, #36	@ 0x24
 8000e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f022 0201 	bic.w	r2, r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8000e88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689a      	ldr	r2, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d107      	bne.n	8000eb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	e006      	b.n	8000ec0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8000ebe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d108      	bne.n	8000eda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	e007      	b.n	8000eea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	685a      	ldr	r2, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000ee8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	6812      	ldr	r2, [r2, #0]
 8000ef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ef8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000efc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000f0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	430a      	orrs	r2, r1
 8000f26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	69d9      	ldr	r1, [r3, #28]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6a1a      	ldr	r2, [r3, #32]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	430a      	orrs	r2, r1
 8000f36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2220      	movs	r2, #32
 8000f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
 8000f76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b20      	cmp	r3, #32
 8000f82:	d138      	bne.n	8000ff6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d101      	bne.n	8000f92 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e032      	b.n	8000ff8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2224      	movs	r2, #36	@ 0x24
 8000f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f022 0201 	bic.w	r2, r2, #1
 8000fb0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000fc0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	6819      	ldr	r1, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0201 	orr.w	r2, r2, #1
 8000fe0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2220      	movs	r2, #32
 8000fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e000      	b.n	8000ff8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000ff6:	2302      	movs	r3, #2
  }
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b20      	cmp	r3, #32
 8001018:	d139      	bne.n	800108e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001024:	2302      	movs	r3, #2
 8001026:	e033      	b.n	8001090 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2201      	movs	r2, #1
 800102c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2224      	movs	r2, #36	@ 0x24
 8001034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 0201 	bic.w	r2, r2, #1
 8001046:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001056:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	4313      	orrs	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0201 	orr.w	r2, r2, #1
 8001078:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2220      	movs	r2, #32
 800107e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	e000      	b.n	8001090 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800108e:	2302      	movs	r3, #2
  }
}
 8001090:	4618      	mov	r0, r3
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr

0800109c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e0b9      	b.n	8001222 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d106      	bne.n	80010c8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fb10 	bl	80006e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2203      	movs	r2, #3
 80010cc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fcd2 	bl	8002a7e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	e03e      	b.n	800115e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010e0:	7bfa      	ldrb	r2, [r7, #15]
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	440b      	add	r3, r1
 80010ee:	3311      	adds	r3, #17
 80010f0:	2201      	movs	r2, #1
 80010f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010f4:	7bfa      	ldrb	r2, [r7, #15]
 80010f6:	6879      	ldr	r1, [r7, #4]
 80010f8:	4613      	mov	r3, r2
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4413      	add	r3, r2
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	440b      	add	r3, r1
 8001102:	3310      	adds	r3, #16
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4413      	add	r3, r2
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	440b      	add	r3, r1
 8001116:	3313      	adds	r3, #19
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800111c:	7bfa      	ldrb	r2, [r7, #15]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	00db      	lsls	r3, r3, #3
 8001128:	440b      	add	r3, r1
 800112a:	3320      	adds	r3, #32
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001130:	7bfa      	ldrb	r2, [r7, #15]
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	440b      	add	r3, r1
 800113e:	3324      	adds	r3, #36	@ 0x24
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	1c5a      	adds	r2, r3, #1
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	440b      	add	r3, r1
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001158:	7bfb      	ldrb	r3, [r7, #15]
 800115a:	3301      	adds	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	791b      	ldrb	r3, [r3, #4]
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	429a      	cmp	r2, r3
 8001166:	d3bb      	bcc.n	80010e0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001168:	2300      	movs	r3, #0
 800116a:	73fb      	strb	r3, [r7, #15]
 800116c:	e044      	b.n	80011f8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800116e:	7bfa      	ldrb	r2, [r7, #15]
 8001170:	6879      	ldr	r1, [r7, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	440b      	add	r3, r1
 800117c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001184:	7bfa      	ldrb	r2, [r7, #15]
 8001186:	6879      	ldr	r1, [r7, #4]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	440b      	add	r3, r1
 8001192:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001196:	7bfa      	ldrb	r2, [r7, #15]
 8001198:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800119a:	7bfa      	ldrb	r2, [r7, #15]
 800119c:	6879      	ldr	r1, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	00db      	lsls	r3, r3, #3
 80011a6:	440b      	add	r3, r1
 80011a8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	4613      	mov	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4413      	add	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	440b      	add	r3, r1
 80011be:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011c6:	7bfa      	ldrb	r2, [r7, #15]
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	4613      	mov	r3, r2
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	440b      	add	r3, r1
 80011d4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	00db      	lsls	r3, r3, #3
 80011e8:	440b      	add	r3, r1
 80011ea:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	3301      	adds	r3, #1
 80011f6:	73fb      	strb	r3, [r7, #15]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	791b      	ldrb	r3, [r3, #4]
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d3b5      	bcc.n	800116e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3304      	adds	r3, #4
 800120a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800120e:	f001 fc51 	bl	8002ab4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001232:	af00      	add	r7, sp, #0
 8001234:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001238:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800123c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001242:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	f000 bff4 	b.w	800223a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001252:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001256:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 816d 	beq.w	8001542 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001268:	4bb4      	ldr	r3, [pc, #720]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b04      	cmp	r3, #4
 8001272:	d00c      	beq.n	800128e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001274:	4bb1      	ldr	r3, [pc, #708]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d157      	bne.n	8001330 <HAL_RCC_OscConfig+0x104>
 8001280:	4bae      	ldr	r3, [pc, #696]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001288:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800128c:	d150      	bne.n	8001330 <HAL_RCC_OscConfig+0x104>
 800128e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001292:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001296:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800129a:	fa93 f3a3 	rbit	r3, r3
 800129e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a6:	fab3 f383 	clz	r3, r3
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80012ae:	d802      	bhi.n	80012b6 <HAL_RCC_OscConfig+0x8a>
 80012b0:	4ba2      	ldr	r3, [pc, #648]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0xb6>
 80012b6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012ba:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012be:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80012c2:	fa93 f3a3 	rbit	r3, r3
 80012c6:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80012ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012ce:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80012d2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80012d6:	fa93 f3a3 	rbit	r3, r3
 80012da:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80012de:	4b97      	ldr	r3, [pc, #604]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80012e6:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80012ea:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80012ee:	fa92 f2a2 	rbit	r2, r2
 80012f2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80012f6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80012fa:	fab2 f282 	clz	r2, r2
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	f042 0220 	orr.w	r2, r2, #32
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	f002 021f 	and.w	r2, r2, #31
 800130a:	2101      	movs	r1, #1
 800130c:	fa01 f202 	lsl.w	r2, r1, r2
 8001310:	4013      	ands	r3, r2
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8114 	beq.w	8001540 <HAL_RCC_OscConfig+0x314>
 8001318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800131c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	f040 810b 	bne.w	8001540 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	f000 bf85 	b.w	800223a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001334:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001340:	d106      	bne.n	8001350 <HAL_RCC_OscConfig+0x124>
 8001342:	4b7e      	ldr	r3, [pc, #504]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a7d      	ldr	r2, [pc, #500]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 8001348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	e036      	b.n	80013be <HAL_RCC_OscConfig+0x192>
 8001350:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001354:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d10c      	bne.n	800137a <HAL_RCC_OscConfig+0x14e>
 8001360:	4b76      	ldr	r3, [pc, #472]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a75      	ldr	r2, [pc, #468]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 8001366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b73      	ldr	r3, [pc, #460]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a72      	ldr	r2, [pc, #456]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 8001372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	e021      	b.n	80013be <HAL_RCC_OscConfig+0x192>
 800137a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800137e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800138a:	d10c      	bne.n	80013a6 <HAL_RCC_OscConfig+0x17a>
 800138c:	4b6b      	ldr	r3, [pc, #428]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a6a      	ldr	r2, [pc, #424]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 8001392:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b68      	ldr	r3, [pc, #416]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a67      	ldr	r2, [pc, #412]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 800139e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e00b      	b.n	80013be <HAL_RCC_OscConfig+0x192>
 80013a6:	4b65      	ldr	r3, [pc, #404]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a64      	ldr	r2, [pc, #400]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 80013ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4b62      	ldr	r3, [pc, #392]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a61      	ldr	r2, [pc, #388]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 80013b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013bc:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013be:	4b5f      	ldr	r3, [pc, #380]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 80013c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013c2:	f023 020f 	bic.w	r2, r3, #15
 80013c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	495a      	ldr	r1, [pc, #360]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 80013d4:	4313      	orrs	r3, r2
 80013d6:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80013dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d054      	beq.n	8001492 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e8:	f7ff fa88 	bl	80008fc <HAL_GetTick>
 80013ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013f0:	e00a      	b.n	8001408 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013f2:	f7ff fa83 	bl	80008fc <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b64      	cmp	r3, #100	@ 0x64
 8001400:	d902      	bls.n	8001408 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	f000 bf19 	b.w	800223a <HAL_RCC_OscConfig+0x100e>
 8001408:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800140c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001414:	fa93 f3a3 	rbit	r3, r3
 8001418:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800141c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001420:	fab3 f383 	clz	r3, r3
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b3f      	cmp	r3, #63	@ 0x3f
 8001428:	d802      	bhi.n	8001430 <HAL_RCC_OscConfig+0x204>
 800142a:	4b44      	ldr	r3, [pc, #272]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	e015      	b.n	800145c <HAL_RCC_OscConfig+0x230>
 8001430:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001434:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001438:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800143c:	fa93 f3a3 	rbit	r3, r3
 8001440:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001444:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001448:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800144c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001450:	fa93 f3a3 	rbit	r3, r3
 8001454:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001458:	4b38      	ldr	r3, [pc, #224]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 800145a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001460:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001464:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001468:	fa92 f2a2 	rbit	r2, r2
 800146c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001470:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001474:	fab2 f282 	clz	r2, r2
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	f042 0220 	orr.w	r2, r2, #32
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	f002 021f 	and.w	r2, r2, #31
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f202 	lsl.w	r2, r1, r2
 800148a:	4013      	ands	r3, r2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0b0      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1c6>
 8001490:	e057      	b.n	8001542 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fa33 	bl	80008fc <HAL_GetTick>
 8001496:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149a:	e00a      	b.n	80014b2 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800149c:	f7ff fa2e 	bl	80008fc <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	2b64      	cmp	r3, #100	@ 0x64
 80014aa:	d902      	bls.n	80014b2 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	f000 bec4 	b.w	800223a <HAL_RCC_OscConfig+0x100e>
 80014b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014b6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ba:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80014be:	fa93 f3a3 	rbit	r3, r3
 80014c2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80014c6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80014d2:	d802      	bhi.n	80014da <HAL_RCC_OscConfig+0x2ae>
 80014d4:	4b19      	ldr	r3, [pc, #100]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	e015      	b.n	8001506 <HAL_RCC_OscConfig+0x2da>
 80014da:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014de:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80014e6:	fa93 f3a3 	rbit	r3, r3
 80014ea:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80014ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014f2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80014f6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001502:	4b0e      	ldr	r3, [pc, #56]	@ (800153c <HAL_RCC_OscConfig+0x310>)
 8001504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001506:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800150a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800150e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001512:	fa92 f2a2 	rbit	r2, r2
 8001516:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800151a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800151e:	fab2 f282 	clz	r2, r2
 8001522:	b2d2      	uxtb	r2, r2
 8001524:	f042 0220 	orr.w	r2, r2, #32
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	f002 021f 	and.w	r2, r2, #31
 800152e:	2101      	movs	r1, #1
 8001530:	fa01 f202 	lsl.w	r2, r1, r2
 8001534:	4013      	ands	r3, r2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1b0      	bne.n	800149c <HAL_RCC_OscConfig+0x270>
 800153a:	e002      	b.n	8001542 <HAL_RCC_OscConfig+0x316>
 800153c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001540:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001546:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	2b00      	cmp	r3, #0
 8001554:	f000 816c 	beq.w	8001830 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001558:	4bcc      	ldr	r3, [pc, #816]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00b      	beq.n	800157c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001564:	4bc9      	ldr	r3, [pc, #804]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 030c 	and.w	r3, r3, #12
 800156c:	2b08      	cmp	r3, #8
 800156e:	d16d      	bne.n	800164c <HAL_RCC_OscConfig+0x420>
 8001570:	4bc6      	ldr	r3, [pc, #792]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d167      	bne.n	800164c <HAL_RCC_OscConfig+0x420>
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001582:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800158e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001592:	fab3 f383 	clz	r3, r3
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2b3f      	cmp	r3, #63	@ 0x3f
 800159a:	d802      	bhi.n	80015a2 <HAL_RCC_OscConfig+0x376>
 800159c:	4bbb      	ldr	r3, [pc, #748]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	e013      	b.n	80015ca <HAL_RCC_OscConfig+0x39e>
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80015ac:	fa93 f3a3 	rbit	r3, r3
 80015b0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80015b4:	2302      	movs	r3, #2
 80015b6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80015ba:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80015be:	fa93 f3a3 	rbit	r3, r3
 80015c2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80015c6:	4bb1      	ldr	r3, [pc, #708]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 80015c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ca:	2202      	movs	r2, #2
 80015cc:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80015d0:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80015d4:	fa92 f2a2 	rbit	r2, r2
 80015d8:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80015dc:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80015e0:	fab2 f282 	clz	r2, r2
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	f042 0220 	orr.w	r2, r2, #32
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	f002 021f 	and.w	r2, r2, #31
 80015f0:	2101      	movs	r1, #1
 80015f2:	fa01 f202 	lsl.w	r2, r1, r2
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d00a      	beq.n	8001612 <HAL_RCC_OscConfig+0x3e6>
 80015fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001600:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d002      	beq.n	8001612 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	f000 be14 	b.w	800223a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001612:	4b9e      	ldr	r3, [pc, #632]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800161a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	21f8      	movs	r1, #248	@ 0xf8
 8001628:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001630:	fa91 f1a1 	rbit	r1, r1
 8001634:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001638:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800163c:	fab1 f181 	clz	r1, r1
 8001640:	b2c9      	uxtb	r1, r1
 8001642:	408b      	lsls	r3, r1
 8001644:	4991      	ldr	r1, [pc, #580]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164a:	e0f1      	b.n	8001830 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800164c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001650:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	f000 8083 	beq.w	8001764 <HAL_RCC_OscConfig+0x538>
 800165e:	2301      	movs	r3, #1
 8001660:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001664:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001668:	fa93 f3a3 	rbit	r3, r3
 800166c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001670:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800167e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	461a      	mov	r2, r3
 8001686:	2301      	movs	r3, #1
 8001688:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff f937 	bl	80008fc <HAL_GetTick>
 800168e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001692:	e00a      	b.n	80016aa <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001694:	f7ff f932 	bl	80008fc <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d902      	bls.n	80016aa <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	f000 bdc8 	b.w	800223a <HAL_RCC_OscConfig+0x100e>
 80016aa:	2302      	movs	r3, #2
 80016ac:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b0:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80016b4:	fa93 f3a3 	rbit	r3, r3
 80016b8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80016bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80016c8:	d802      	bhi.n	80016d0 <HAL_RCC_OscConfig+0x4a4>
 80016ca:	4b70      	ldr	r3, [pc, #448]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	e013      	b.n	80016f8 <HAL_RCC_OscConfig+0x4cc>
 80016d0:	2302      	movs	r3, #2
 80016d2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80016da:	fa93 f3a3 	rbit	r3, r3
 80016de:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80016e2:	2302      	movs	r3, #2
 80016e4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80016e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80016f4:	4b65      	ldr	r3, [pc, #404]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f8:	2202      	movs	r2, #2
 80016fa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80016fe:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001702:	fa92 f2a2 	rbit	r2, r2
 8001706:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800170a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800170e:	fab2 f282 	clz	r2, r2
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	f042 0220 	orr.w	r2, r2, #32
 8001718:	b2d2      	uxtb	r2, r2
 800171a:	f002 021f 	and.w	r2, r2, #31
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	4013      	ands	r3, r2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0b4      	beq.n	8001694 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172a:	4b58      	ldr	r3, [pc, #352]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001732:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001736:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	21f8      	movs	r1, #248	@ 0xf8
 8001740:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001748:	fa91 f1a1 	rbit	r1, r1
 800174c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001750:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001754:	fab1 f181 	clz	r1, r1
 8001758:	b2c9      	uxtb	r1, r1
 800175a:	408b      	lsls	r3, r1
 800175c:	494b      	ldr	r1, [pc, #300]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]
 8001762:	e065      	b.n	8001830 <HAL_RCC_OscConfig+0x604>
 8001764:	2301      	movs	r3, #1
 8001766:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001776:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001784:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	461a      	mov	r2, r3
 800178c:	2300      	movs	r3, #0
 800178e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff f8b4 	bl	80008fc <HAL_GetTick>
 8001794:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800179a:	f7ff f8af 	bl	80008fc <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d902      	bls.n	80017b0 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	f000 bd45 	b.w	800223a <HAL_RCC_OscConfig+0x100e>
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80017c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	fab3 f383 	clz	r3, r3
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80017ce:	d802      	bhi.n	80017d6 <HAL_RCC_OscConfig+0x5aa>
 80017d0:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	e013      	b.n	80017fe <HAL_RCC_OscConfig+0x5d2>
 80017d6:	2302      	movs	r3, #2
 80017d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017e0:	fa93 f3a3 	rbit	r3, r3
 80017e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80017e8:	2302      	movs	r3, #2
 80017ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80017ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017f2:	fa93 f3a3 	rbit	r3, r3
 80017f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80017fa:	4b24      	ldr	r3, [pc, #144]	@ (800188c <HAL_RCC_OscConfig+0x660>)
 80017fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017fe:	2202      	movs	r2, #2
 8001800:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001804:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001808:	fa92 f2a2 	rbit	r2, r2
 800180c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001810:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001814:	fab2 f282 	clz	r2, r2
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f042 0220 	orr.w	r2, r2, #32
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	f002 021f 	and.w	r2, r2, #31
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1b4      	bne.n	800179a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001830:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001834:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	f000 8115 	beq.w	8001a70 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001846:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800184a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	699b      	ldr	r3, [r3, #24]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d07e      	beq.n	8001954 <HAL_RCC_OscConfig+0x728>
 8001856:	2301      	movs	r3, #1
 8001858:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001868:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <HAL_RCC_OscConfig+0x664>)
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	461a      	mov	r2, r3
 800187c:	2301      	movs	r3, #1
 800187e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001880:	f7ff f83c 	bl	80008fc <HAL_GetTick>
 8001884:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001888:	e00f      	b.n	80018aa <HAL_RCC_OscConfig+0x67e>
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000
 8001890:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001894:	f7ff f832 	bl	80008fc <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d902      	bls.n	80018aa <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	f000 bcc8 	b.w	800223a <HAL_RCC_OscConfig+0x100e>
 80018aa:	2302      	movs	r3, #2
 80018ac:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80018bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018c4:	2202      	movs	r2, #2
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018cc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	fa93 f2a3 	rbit	r2, r3
 80018d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018e8:	2202      	movs	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	fa93 f2a3 	rbit	r2, r3
 80018fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001902:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001904:	4bb0      	ldr	r3, [pc, #704]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001906:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001908:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800190c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001910:	2102      	movs	r1, #2
 8001912:	6019      	str	r1, [r3, #0]
 8001914:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001918:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	fa93 f1a3 	rbit	r1, r3
 8001922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001926:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800192a:	6019      	str	r1, [r3, #0]
  return result;
 800192c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001930:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	fab3 f383 	clz	r3, r3
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f003 031f 	and.w	r3, r3, #31
 8001946:	2101      	movs	r1, #1
 8001948:	fa01 f303 	lsl.w	r3, r1, r3
 800194c:	4013      	ands	r3, r2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d0a0      	beq.n	8001894 <HAL_RCC_OscConfig+0x668>
 8001952:	e08d      	b.n	8001a70 <HAL_RCC_OscConfig+0x844>
 8001954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001958:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001964:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001972:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001976:	601a      	str	r2, [r3, #0]
  return result;
 8001978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800197c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001980:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	4b90      	ldr	r3, [pc, #576]	@ (8001bcc <HAL_RCC_OscConfig+0x9a0>)
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	2300      	movs	r3, #0
 8001994:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001996:	f7fe ffb1 	bl	80008fc <HAL_GetTick>
 800199a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199e:	e00a      	b.n	80019b6 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a0:	f7fe ffac 	bl	80008fc <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d902      	bls.n	80019b6 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	f000 bc42 	b.w	800223a <HAL_RCC_OscConfig+0x100e>
 80019b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ba:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80019be:	2202      	movs	r2, #2
 80019c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019c6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	fa93 f2a3 	rbit	r2, r3
 80019d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019d4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019de:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019ea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	fa93 f2a3 	rbit	r2, r3
 80019f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019f8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a02:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a06:	2202      	movs	r2, #2
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	fa93 f2a3 	rbit	r2, r3
 8001a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a20:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a22:	4b69      	ldr	r3, [pc, #420]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001a24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a2e:	2102      	movs	r1, #2
 8001a30:	6019      	str	r1, [r3, #0]
 8001a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a36:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f1a3 	rbit	r1, r3
 8001a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a44:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a48:	6019      	str	r1, [r3, #0]
  return result;
 8001a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a4e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fab3 f383 	clz	r3, r3
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	f003 031f 	and.w	r3, r3, #31
 8001a64:	2101      	movs	r1, #1
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d197      	bne.n	80019a0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 819e 	beq.w	8001dc2 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8c:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d116      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a98:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001a9a:	69db      	ldr	r3, [r3, #28]
 8001a9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	61d3      	str	r3, [r2, #28]
 8001aa4:	4b48      	ldr	r3, [pc, #288]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001aac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ab0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001aba:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001abe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac6:	4b42      	ldr	r3, [pc, #264]	@ (8001bd0 <HAL_RCC_OscConfig+0x9a4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d11a      	bne.n	8001b08 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8001bd0 <HAL_RCC_OscConfig+0x9a4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8001bd0 <HAL_RCC_OscConfig+0x9a4>)
 8001ad8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001adc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ade:	f7fe ff0d 	bl	80008fc <HAL_GetTick>
 8001ae2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	e009      	b.n	8001afc <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae8:	f7fe ff08 	bl	80008fc <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b64      	cmp	r3, #100	@ 0x64
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e39e      	b.n	800223a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afc:	4b34      	ldr	r3, [pc, #208]	@ (8001bd0 <HAL_RCC_OscConfig+0x9a4>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ef      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d106      	bne.n	8001b26 <HAL_RCC_OscConfig+0x8fa>
 8001b18:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	6213      	str	r3, [r2, #32]
 8001b24:	e035      	b.n	8001b92 <HAL_RCC_OscConfig+0x966>
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10c      	bne.n	8001b50 <HAL_RCC_OscConfig+0x924>
 8001b36:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	4a23      	ldr	r2, [pc, #140]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	6213      	str	r3, [r2, #32]
 8001b42:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	4a20      	ldr	r2, [pc, #128]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b48:	f023 0304 	bic.w	r3, r3, #4
 8001b4c:	6213      	str	r3, [r2, #32]
 8001b4e:	e020      	b.n	8001b92 <HAL_RCC_OscConfig+0x966>
 8001b50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	2b05      	cmp	r3, #5
 8001b5e:	d10c      	bne.n	8001b7a <HAL_RCC_OscConfig+0x94e>
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b62:	6a1b      	ldr	r3, [r3, #32]
 8001b64:	4a18      	ldr	r2, [pc, #96]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6213      	str	r3, [r2, #32]
 8001b6c:	4b16      	ldr	r3, [pc, #88]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	4a15      	ldr	r2, [pc, #84]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b72:	f043 0301 	orr.w	r3, r3, #1
 8001b76:	6213      	str	r3, [r2, #32]
 8001b78:	e00b      	b.n	8001b92 <HAL_RCC_OscConfig+0x966>
 8001b7a:	4b13      	ldr	r3, [pc, #76]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	4a12      	ldr	r2, [pc, #72]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6213      	str	r3, [r2, #32]
 8001b86:	4b10      	ldr	r3, [pc, #64]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc8 <HAL_RCC_OscConfig+0x99c>)
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b96:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 8087 	beq.w	8001cb2 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba4:	f7fe feaa 	bl	80008fc <HAL_GetTick>
 8001ba8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bac:	e012      	b.n	8001bd4 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7fe fea5 	bl	80008fc <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d908      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e339      	b.n	800223a <HAL_RCC_OscConfig+0x100e>
 8001bc6:	bf00      	nop
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	10908120 	.word	0x10908120
 8001bd0:	40007000 	.word	0x40007000
 8001bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001bdc:	2202      	movs	r2, #2
 8001bde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	fa93 f2a3 	rbit	r2, r3
 8001bee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bfc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c00:	2202      	movs	r2, #2
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	fa93 f2a3 	rbit	r2, r3
 8001c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c16:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c1a:	601a      	str	r2, [r3, #0]
  return result;
 8001c1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c20:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c24:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d102      	bne.n	8001c3c <HAL_RCC_OscConfig+0xa10>
 8001c36:	4b98      	ldr	r3, [pc, #608]	@ (8001e98 <HAL_RCC_OscConfig+0xc6c>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	e013      	b.n	8001c64 <HAL_RCC_OscConfig+0xa38>
 8001c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c40:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c44:	2202      	movs	r2, #2
 8001c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c4c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	fa93 f2a3 	rbit	r2, r3
 8001c56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	4b8d      	ldr	r3, [pc, #564]	@ (8001e98 <HAL_RCC_OscConfig+0xc6c>)
 8001c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c68:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001c6c:	2102      	movs	r1, #2
 8001c6e:	6011      	str	r1, [r2, #0]
 8001c70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c74:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001c78:	6812      	ldr	r2, [r2, #0]
 8001c7a:	fa92 f1a2 	rbit	r1, r2
 8001c7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c82:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c86:	6011      	str	r1, [r2, #0]
  return result;
 8001c88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001c8c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001c90:	6812      	ldr	r2, [r2, #0]
 8001c92:	fab2 f282 	clz	r2, r2
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c9c:	b2d2      	uxtb	r2, r2
 8001c9e:	f002 021f 	and.w	r2, r2, #31
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f43f af7f 	beq.w	8001bae <HAL_RCC_OscConfig+0x982>
 8001cb0:	e07d      	b.n	8001dae <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7fe fe23 	bl	80008fc <HAL_GetTick>
 8001cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cbc:	f7fe fe1e 	bl	80008fc <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e2b2      	b.n	800223a <HAL_RCC_OscConfig+0x100e>
 8001cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd8:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001cdc:	2202      	movs	r2, #2
 8001cde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce4:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfc:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d00:	2202      	movs	r2, #2
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d08:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	fa93 f2a3 	rbit	r2, r3
 8001d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d16:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d1a:	601a      	str	r2, [r3, #0]
  return result;
 8001d1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d20:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d24:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d102      	bne.n	8001d3c <HAL_RCC_OscConfig+0xb10>
 8001d36:	4b58      	ldr	r3, [pc, #352]	@ (8001e98 <HAL_RCC_OscConfig+0xc6c>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	e013      	b.n	8001d64 <HAL_RCC_OscConfig+0xb38>
 8001d3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d40:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d44:	2202      	movs	r2, #2
 8001d46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d4c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	fa93 f2a3 	rbit	r2, r3
 8001d56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	4b4d      	ldr	r3, [pc, #308]	@ (8001e98 <HAL_RCC_OscConfig+0xc6c>)
 8001d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d64:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d68:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001d6c:	2102      	movs	r1, #2
 8001d6e:	6011      	str	r1, [r2, #0]
 8001d70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d74:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	fa92 f1a2 	rbit	r1, r2
 8001d7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d82:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d86:	6011      	str	r1, [r2, #0]
  return result;
 8001d88:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001d8c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f002 021f 	and.w	r2, r2, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d186      	bne.n	8001cbc <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dae:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d105      	bne.n	8001dc2 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db6:	4b38      	ldr	r3, [pc, #224]	@ (8001e98 <HAL_RCC_OscConfig+0xc6c>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	4a37      	ldr	r2, [pc, #220]	@ (8001e98 <HAL_RCC_OscConfig+0xc6c>)
 8001dbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8232 	beq.w	8002238 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd4:	4b30      	ldr	r3, [pc, #192]	@ (8001e98 <HAL_RCC_OscConfig+0xc6c>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 030c 	and.w	r3, r3, #12
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	f000 8201 	beq.w	80021e4 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	69db      	ldr	r3, [r3, #28]
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	f040 8157 	bne.w	80020a2 <HAL_RCC_OscConfig+0xe76>
 8001df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001dfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e06:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e14:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e18:	601a      	str	r2, [r3, #0]
  return result;
 8001e1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e1e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e22:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e24:	fab3 f383 	clz	r3, r3
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e2e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	461a      	mov	r2, r3
 8001e36:	2300      	movs	r3, #0
 8001e38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7fe fd5f 	bl	80008fc <HAL_GetTick>
 8001e3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e42:	e009      	b.n	8001e58 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e44:	f7fe fd5a 	bl	80008fc <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e1f0      	b.n	800223a <HAL_RCC_OscConfig+0x100e>
 8001e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e5c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e6a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	fa93 f2a3 	rbit	r2, r3
 8001e74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e78:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e7c:	601a      	str	r2, [r3, #0]
  return result;
 8001e7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e82:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001e86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001e90:	d804      	bhi.n	8001e9c <HAL_RCC_OscConfig+0xc70>
 8001e92:	4b01      	ldr	r3, [pc, #4]	@ (8001e98 <HAL_RCC_OscConfig+0xc6c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	e029      	b.n	8001eec <HAL_RCC_OscConfig+0xcc0>
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001ea4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ea8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eae:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	fa93 f2a3 	rbit	r2, r3
 8001eb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ebc:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001eca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	fa93 f2a3 	rbit	r2, r3
 8001ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee2:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4bc3      	ldr	r3, [pc, #780]	@ (80021f8 <HAL_RCC_OscConfig+0xfcc>)
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ef0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001ef4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001ef8:	6011      	str	r1, [r2, #0]
 8001efa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001efe:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	fa92 f1a2 	rbit	r1, r2
 8001f08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f0c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f10:	6011      	str	r1, [r2, #0]
  return result;
 8001f12:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f16:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	fab2 f282 	clz	r2, r2
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f042 0220 	orr.w	r2, r2, #32
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f002 021f 	and.w	r2, r2, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d185      	bne.n	8001e44 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f38:	4baf      	ldr	r3, [pc, #700]	@ (80021f8 <HAL_RCC_OscConfig+0xfcc>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f44:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f50:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	49a7      	ldr	r1, [pc, #668]	@ (80021f8 <HAL_RCC_OscConfig+0xfcc>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	604b      	str	r3, [r1, #4]
 8001f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f64:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001f68:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f72:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	fa93 f2a3 	rbit	r2, r3
 8001f7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f80:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f84:	601a      	str	r2, [r3, #0]
  return result;
 8001f86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f8a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001f8e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f90:	fab3 f383 	clz	r3, r3
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001f9a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa6:	f7fe fca9 	bl	80008fc <HAL_GetTick>
 8001faa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fae:	e009      	b.n	8001fc4 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb0:	f7fe fca4 	bl	80008fc <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e13a      	b.n	800223a <HAL_RCC_OscConfig+0x100e>
 8001fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001fcc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	fa93 f2a3 	rbit	r2, r3
 8001fe0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001fe8:	601a      	str	r2, [r3, #0]
  return result;
 8001fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fee:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001ff2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ff4:	fab3 f383 	clz	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ffc:	d802      	bhi.n	8002004 <HAL_RCC_OscConfig+0xdd8>
 8001ffe:	4b7e      	ldr	r3, [pc, #504]	@ (80021f8 <HAL_RCC_OscConfig+0xfcc>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	e027      	b.n	8002054 <HAL_RCC_OscConfig+0xe28>
 8002004:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002008:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800200c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002010:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	fa93 f2a3 	rbit	r2, r3
 8002020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002024:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800202e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002032:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	fa93 f2a3 	rbit	r2, r3
 8002046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	4b69      	ldr	r3, [pc, #420]	@ (80021f8 <HAL_RCC_OscConfig+0xfcc>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002058:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800205c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002060:	6011      	str	r1, [r2, #0]
 8002062:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002066:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	fa92 f1a2 	rbit	r1, r2
 8002070:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002074:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002078:	6011      	str	r1, [r2, #0]
  return result;
 800207a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800207e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	f042 0220 	orr.w	r2, r2, #32
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f002 021f 	and.w	r2, r2, #31
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d087      	beq.n	8001fb0 <HAL_RCC_OscConfig+0xd84>
 80020a0:	e0ca      	b.n	8002238 <HAL_RCC_OscConfig+0x100c>
 80020a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80020aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	fa93 f2a3 	rbit	r2, r3
 80020be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80020c6:	601a      	str	r2, [r3, #0]
  return result;
 80020c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020cc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80020d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	fab3 f383 	clz	r3, r3
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	461a      	mov	r2, r3
 80020e4:	2300      	movs	r3, #0
 80020e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e8:	f7fe fc08 	bl	80008fc <HAL_GetTick>
 80020ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f0:	e009      	b.n	8002106 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f2:	f7fe fc03 	bl	80008fc <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e099      	b.n	800223a <HAL_RCC_OscConfig+0x100e>
 8002106:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800210e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002118:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	fa93 f2a3 	rbit	r2, r3
 8002122:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002126:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800212a:	601a      	str	r2, [r3, #0]
  return result;
 800212c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002130:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002134:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b3f      	cmp	r3, #63	@ 0x3f
 800213e:	d802      	bhi.n	8002146 <HAL_RCC_OscConfig+0xf1a>
 8002140:	4b2d      	ldr	r3, [pc, #180]	@ (80021f8 <HAL_RCC_OscConfig+0xfcc>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	e027      	b.n	8002196 <HAL_RCC_OscConfig+0xf6a>
 8002146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800214a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800214e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002158:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	fa93 f2a3 	rbit	r2, r3
 8002162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002166:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002174:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800218c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002190:	601a      	str	r2, [r3, #0]
 8002192:	4b19      	ldr	r3, [pc, #100]	@ (80021f8 <HAL_RCC_OscConfig+0xfcc>)
 8002194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002196:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800219a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800219e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021a2:	6011      	str	r1, [r2, #0]
 80021a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021a8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80021ac:	6812      	ldr	r2, [r2, #0]
 80021ae:	fa92 f1a2 	rbit	r1, r2
 80021b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021b6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80021ba:	6011      	str	r1, [r2, #0]
  return result;
 80021bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021c0:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80021c4:	6812      	ldr	r2, [r2, #0]
 80021c6:	fab2 f282 	clz	r2, r2
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	f042 0220 	orr.w	r2, r2, #32
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f002 021f 	and.w	r2, r2, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f202 	lsl.w	r2, r1, r2
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d187      	bne.n	80020f2 <HAL_RCC_OscConfig+0xec6>
 80021e2:	e029      	b.n	8002238 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d103      	bne.n	80021fc <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e020      	b.n	800223a <HAL_RCC_OscConfig+0x100e>
 80021f8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021fc:	4b11      	ldr	r3, [pc, #68]	@ (8002244 <HAL_RCC_OscConfig+0x1018>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002204:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002208:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800220c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002210:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	429a      	cmp	r2, r3
 800221a:	d10b      	bne.n	8002234 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800221c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002220:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002228:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000

08002248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b09e      	sub	sp, #120	@ 0x78
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002252:	2300      	movs	r3, #0
 8002254:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d101      	bne.n	8002260 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e154      	b.n	800250a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002260:	4b89      	ldr	r3, [pc, #548]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	429a      	cmp	r2, r3
 800226c:	d910      	bls.n	8002290 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226e:	4b86      	ldr	r3, [pc, #536]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f023 0207 	bic.w	r2, r3, #7
 8002276:	4984      	ldr	r1, [pc, #528]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4313      	orrs	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227e:	4b82      	ldr	r3, [pc, #520]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	683a      	ldr	r2, [r7, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d001      	beq.n	8002290 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e13c      	b.n	800250a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d008      	beq.n	80022ae <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b7b      	ldr	r3, [pc, #492]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4978      	ldr	r1, [pc, #480]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 80cd 	beq.w	8002456 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d137      	bne.n	8002334 <HAL_RCC_ClockConfig+0xec>
 80022c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80022cc:	fa93 f3a3 	rbit	r3, r3
 80022d0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80022d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d4:	fab3 f383 	clz	r3, r3
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b3f      	cmp	r3, #63	@ 0x3f
 80022dc:	d802      	bhi.n	80022e4 <HAL_RCC_ClockConfig+0x9c>
 80022de:	4b6b      	ldr	r3, [pc, #428]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	e00f      	b.n	8002304 <HAL_RCC_ClockConfig+0xbc>
 80022e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80022f2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022f6:	663b      	str	r3, [r7, #96]	@ 0x60
 80022f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002300:	4b62      	ldr	r3, [pc, #392]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002308:	65ba      	str	r2, [r7, #88]	@ 0x58
 800230a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800230c:	fa92 f2a2 	rbit	r2, r2
 8002310:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002312:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002314:	fab2 f282 	clz	r2, r2
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	f042 0220 	orr.w	r2, r2, #32
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	f002 021f 	and.w	r2, r2, #31
 8002324:	2101      	movs	r1, #1
 8002326:	fa01 f202 	lsl.w	r2, r1, r2
 800232a:	4013      	ands	r3, r2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d171      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0ea      	b.n	800250a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b02      	cmp	r3, #2
 800233a:	d137      	bne.n	80023ac <HAL_RCC_ClockConfig+0x164>
 800233c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002340:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002344:	fa93 f3a3 	rbit	r3, r3
 8002348:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800234a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234c:	fab3 f383 	clz	r3, r3
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b3f      	cmp	r3, #63	@ 0x3f
 8002354:	d802      	bhi.n	800235c <HAL_RCC_ClockConfig+0x114>
 8002356:	4b4d      	ldr	r3, [pc, #308]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	e00f      	b.n	800237c <HAL_RCC_ClockConfig+0x134>
 800235c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002360:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002364:	fa93 f3a3 	rbit	r3, r3
 8002368:	647b      	str	r3, [r7, #68]	@ 0x44
 800236a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800236e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002370:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002372:	fa93 f3a3 	rbit	r3, r3
 8002376:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002378:	4b44      	ldr	r3, [pc, #272]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 800237a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002380:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002382:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002384:	fa92 f2a2 	rbit	r2, r2
 8002388:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800238a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800238c:	fab2 f282 	clz	r2, r2
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f042 0220 	orr.w	r2, r2, #32
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f002 021f 	and.w	r2, r2, #31
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d135      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0ae      	b.n	800250a <HAL_RCC_ClockConfig+0x2c2>
 80023ac:	2302      	movs	r3, #2
 80023ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80023b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80023c2:	d802      	bhi.n	80023ca <HAL_RCC_ClockConfig+0x182>
 80023c4:	4b31      	ldr	r3, [pc, #196]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	e00d      	b.n	80023e6 <HAL_RCC_ClockConfig+0x19e>
 80023ca:	2302      	movs	r3, #2
 80023cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023d0:	fa93 f3a3 	rbit	r3, r3
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d6:	2302      	movs	r3, #2
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	4b2a      	ldr	r3, [pc, #168]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	2202      	movs	r2, #2
 80023e8:	61ba      	str	r2, [r7, #24]
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	fa92 f2a2 	rbit	r2, r2
 80023f0:	617a      	str	r2, [r7, #20]
  return result;
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	fab2 f282 	clz	r2, r2
 80023f8:	b2d2      	uxtb	r2, r2
 80023fa:	f042 0220 	orr.w	r2, r2, #32
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f002 021f 	and.w	r2, r2, #31
 8002404:	2101      	movs	r1, #1
 8002406:	fa01 f202 	lsl.w	r2, r1, r2
 800240a:	4013      	ands	r3, r2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e07a      	b.n	800250a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002414:	4b1d      	ldr	r3, [pc, #116]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f023 0203 	bic.w	r2, r3, #3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	491a      	ldr	r1, [pc, #104]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002422:	4313      	orrs	r3, r2
 8002424:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002426:	f7fe fa69 	bl	80008fc <HAL_GetTick>
 800242a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800242c:	e00a      	b.n	8002444 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800242e:	f7fe fa65 	bl	80008fc <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	f241 3288 	movw	r2, #5000	@ 0x1388
 800243c:	4293      	cmp	r3, r2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e062      	b.n	800250a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_RCC_ClockConfig+0x244>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 020c 	and.w	r2, r3, #12
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	429a      	cmp	r2, r3
 8002454:	d1eb      	bne.n	800242e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002456:	4b0c      	ldr	r3, [pc, #48]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d215      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002464:	4b08      	ldr	r3, [pc, #32]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f023 0207 	bic.w	r2, r3, #7
 800246c:	4906      	ldr	r1, [pc, #24]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	4313      	orrs	r3, r2
 8002472:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002474:	4b04      	ldr	r3, [pc, #16]	@ (8002488 <HAL_RCC_ClockConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d006      	beq.n	8002490 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e041      	b.n	800250a <HAL_RCC_ClockConfig+0x2c2>
 8002486:	bf00      	nop
 8002488:	40022000 	.word	0x40022000
 800248c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b1d      	ldr	r3, [pc, #116]	@ (8002514 <HAL_RCC_ClockConfig+0x2cc>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	491a      	ldr	r1, [pc, #104]	@ (8002514 <HAL_RCC_ClockConfig+0x2cc>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ba:	4b16      	ldr	r3, [pc, #88]	@ (8002514 <HAL_RCC_ClockConfig+0x2cc>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	4912      	ldr	r1, [pc, #72]	@ (8002514 <HAL_RCC_ClockConfig+0x2cc>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024ce:	f000 f829 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024d2:	4601      	mov	r1, r0
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <HAL_RCC_ClockConfig+0x2cc>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024dc:	22f0      	movs	r2, #240	@ 0xf0
 80024de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	fa92 f2a2 	rbit	r2, r2
 80024e6:	60fa      	str	r2, [r7, #12]
  return result;
 80024e8:	68fa      	ldr	r2, [r7, #12]
 80024ea:	fab2 f282 	clz	r2, r2
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	40d3      	lsrs	r3, r2
 80024f2:	4a09      	ldr	r2, [pc, #36]	@ (8002518 <HAL_RCC_ClockConfig+0x2d0>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	fa21 f303 	lsr.w	r3, r1, r3
 80024fa:	4a08      	ldr	r2, [pc, #32]	@ (800251c <HAL_RCC_ClockConfig+0x2d4>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80024fe:	4b08      	ldr	r3, [pc, #32]	@ (8002520 <HAL_RCC_ClockConfig+0x2d8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f9b6 	bl	8000874 <HAL_InitTick>
  
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3778      	adds	r7, #120	@ 0x78
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	08002b60 	.word	0x08002b60
 800251c:	20000008 	.word	0x20000008
 8002520:	2000000c 	.word	0x2000000c

08002524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800253e:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b04      	cmp	r3, #4
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x30>
 800254e:	2b08      	cmp	r3, #8
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x36>
 8002552:	e026      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002554:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002556:	613b      	str	r3, [r7, #16]
      break;
 8002558:	e026      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	0c9b      	lsrs	r3, r3, #18
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	4a17      	ldr	r2, [pc, #92]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002564:	5cd3      	ldrb	r3, [r2, r3]
 8002566:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002568:	4b13      	ldr	r3, [pc, #76]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x94>)
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	4a14      	ldr	r2, [pc, #80]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002580:	4a0e      	ldr	r2, [pc, #56]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	fbb2 f2f3 	udiv	r2, r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	fb02 f303 	mul.w	r3, r2, r3
 800258e:	617b      	str	r3, [r7, #20]
 8002590:	e004      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a0c      	ldr	r2, [pc, #48]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002596:	fb02 f303 	mul.w	r3, r2, r3
 800259a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	613b      	str	r3, [r7, #16]
      break;
 80025a0:	e002      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a2:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 80025a4:	613b      	str	r3, [r7, #16]
      break;
 80025a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a8:	693b      	ldr	r3, [r7, #16]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	371c      	adds	r7, #28
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	007a1200 	.word	0x007a1200
 80025c0:	08002b70 	.word	0x08002b70
 80025c4:	08002b80 	.word	0x08002b80
 80025c8:	003d0900 	.word	0x003d0900

080025cc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b092      	sub	sp, #72	@ 0x48
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d4:	2300      	movs	r3, #0
 80025d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80d2 	beq.w	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10e      	bne.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	4a49      	ldr	r2, [pc, #292]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002606:	61d3      	str	r3, [r2, #28]
 8002608:	4b47      	ldr	r3, [pc, #284]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002610:	60bb      	str	r3, [r7, #8]
 8002612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b44      	ldr	r3, [pc, #272]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b41      	ldr	r3, [pc, #260]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a40      	ldr	r2, [pc, #256]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002630:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7fe f963 	bl	80008fc <HAL_GetTick>
 8002636:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e008      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7fe f95f 	bl	80008fc <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	@ 0x64
 8002646:	d901      	bls.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e167      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b37      	ldr	r3, [pc, #220]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002658:	4b33      	ldr	r3, [pc, #204]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002660:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8082 	beq.w	800276e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002672:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002674:	429a      	cmp	r2, r3
 8002676:	d07a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002678:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002680:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002682:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002686:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	461a      	mov	r2, r3
 800269a:	4b25      	ldr	r3, [pc, #148]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800269c:	4413      	add	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	461a      	mov	r2, r3
 80026a2:	2301      	movs	r3, #1
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ae:	fa93 f3a3 	rbit	r3, r3
 80026b2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80026b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026b6:	fab3 f383 	clz	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	461a      	mov	r2, r3
 80026be:	4b1c      	ldr	r3, [pc, #112]	@ (8002730 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	461a      	mov	r2, r3
 80026c6:	2300      	movs	r3, #0
 80026c8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026ca:	4a17      	ldr	r2, [pc, #92]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80026cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026ce:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d049      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026da:	f7fe f90f 	bl	80008fc <HAL_GetTick>
 80026de:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026e0:	e00a      	b.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026e2:	f7fe f90b 	bl	80008fc <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e111      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x350>
 80026f8:	2302      	movs	r3, #2
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	fa93 f3a3 	rbit	r3, r3
 8002702:	627b      	str	r3, [r7, #36]	@ 0x24
 8002704:	2302      	movs	r3, #2
 8002706:	623b      	str	r3, [r7, #32]
 8002708:	6a3b      	ldr	r3, [r7, #32]
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	61fb      	str	r3, [r7, #28]
  return result;
 8002710:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d108      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002722:	4b01      	ldr	r3, [pc, #4]	@ (8002728 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	e00d      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002728:	40021000 	.word	0x40021000
 800272c:	40007000 	.word	0x40007000
 8002730:	10908100 	.word	0x10908100
 8002734:	2302      	movs	r3, #2
 8002736:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	fa93 f3a3 	rbit	r3, r3
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	4b78      	ldr	r3, [pc, #480]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	2202      	movs	r2, #2
 8002746:	613a      	str	r2, [r7, #16]
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	fa92 f2a2 	rbit	r2, r2
 800274e:	60fa      	str	r2, [r7, #12]
  return result;
 8002750:	68fa      	ldr	r2, [r7, #12]
 8002752:	fab2 f282 	clz	r2, r2
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800275c:	b2d2      	uxtb	r2, r2
 800275e:	f002 021f 	and.w	r2, r2, #31
 8002762:	2101      	movs	r1, #1
 8002764:	fa01 f202 	lsl.w	r2, r1, r2
 8002768:	4013      	ands	r3, r2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0b9      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800276e:	4b6d      	ldr	r3, [pc, #436]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	496a      	ldr	r1, [pc, #424]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800277c:	4313      	orrs	r3, r2
 800277e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002780:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002784:	2b01      	cmp	r3, #1
 8002786:	d105      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002788:	4b66      	ldr	r3, [pc, #408]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	4a65      	ldr	r2, [pc, #404]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800278e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002792:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a0:	4b60      	ldr	r3, [pc, #384]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	f023 0203 	bic.w	r2, r3, #3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	495d      	ldr	r1, [pc, #372]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d008      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027be:	4b59      	ldr	r3, [pc, #356]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4956      	ldr	r1, [pc, #344]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0304 	and.w	r3, r3, #4
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027dc:	4b51      	ldr	r3, [pc, #324]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	494e      	ldr	r1, [pc, #312]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d008      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fe:	f023 0210 	bic.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	4947      	ldr	r1, [pc, #284]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002808:	4313      	orrs	r3, r2
 800280a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002818:	4b42      	ldr	r3, [pc, #264]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002824:	493f      	ldr	r1, [pc, #252]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002836:	4b3b      	ldr	r3, [pc, #236]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283a:	f023 0220 	bic.w	r2, r3, #32
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4938      	ldr	r1, [pc, #224]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002844:	4313      	orrs	r3, r2
 8002846:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002854:	4b33      	ldr	r3, [pc, #204]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	4930      	ldr	r1, [pc, #192]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002862:	4313      	orrs	r3, r2
 8002864:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002872:	4b2c      	ldr	r3, [pc, #176]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002876:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	4929      	ldr	r1, [pc, #164]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002880:	4313      	orrs	r3, r2
 8002882:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002890:	4b24      	ldr	r3, [pc, #144]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	4921      	ldr	r1, [pc, #132]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d008      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ba:	491a      	ldr	r1, [pc, #104]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d008      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80028cc:	4b15      	ldr	r3, [pc, #84]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d8:	4912      	ldr	r1, [pc, #72]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d008      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80028ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	490b      	ldr	r1, [pc, #44]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800290a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002914:	4903      	ldr	r1, [pc, #12]	@ (8002924 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002916:	4313      	orrs	r3, r2
 8002918:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3748      	adds	r7, #72	@ 0x48
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000

08002928 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e09d      	b.n	8002a76 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800293e:	2b00      	cmp	r3, #0
 8002940:	d108      	bne.n	8002954 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800294a:	d009      	beq.n	8002960 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	61da      	str	r2, [r3, #28]
 8002952:	e005      	b.n	8002960 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d106      	bne.n	8002980 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7fd fe72 	bl	8000664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002996:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029a0:	d902      	bls.n	80029a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	e002      	b.n	80029ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80029a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80029b6:	d007      	beq.n	80029c8 <HAL_SPI_Init+0xa0>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80029c0:	d002      	beq.n	80029c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	431a      	orrs	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	699b      	ldr	r3, [r3, #24]
 80029f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0a:	ea42 0103 	orr.w	r1, r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	0c1b      	lsrs	r3, r3, #16
 8002a24:	f003 0204 	and.w	r2, r3, #4
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	f003 0310 	and.w	r3, r3, #16
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a44:	ea42 0103 	orr.w	r1, r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002a86:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8002a8a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <memset>:
 8002af0:	4402      	add	r2, r0
 8002af2:	4603      	mov	r3, r0
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d100      	bne.n	8002afa <memset+0xa>
 8002af8:	4770      	bx	lr
 8002afa:	f803 1b01 	strb.w	r1, [r3], #1
 8002afe:	e7f9      	b.n	8002af4 <memset+0x4>

08002b00 <__libc_init_array>:
 8002b00:	b570      	push	{r4, r5, r6, lr}
 8002b02:	4d0d      	ldr	r5, [pc, #52]	@ (8002b38 <__libc_init_array+0x38>)
 8002b04:	4c0d      	ldr	r4, [pc, #52]	@ (8002b3c <__libc_init_array+0x3c>)
 8002b06:	1b64      	subs	r4, r4, r5
 8002b08:	10a4      	asrs	r4, r4, #2
 8002b0a:	2600      	movs	r6, #0
 8002b0c:	42a6      	cmp	r6, r4
 8002b0e:	d109      	bne.n	8002b24 <__libc_init_array+0x24>
 8002b10:	4d0b      	ldr	r5, [pc, #44]	@ (8002b40 <__libc_init_array+0x40>)
 8002b12:	4c0c      	ldr	r4, [pc, #48]	@ (8002b44 <__libc_init_array+0x44>)
 8002b14:	f000 f818 	bl	8002b48 <_init>
 8002b18:	1b64      	subs	r4, r4, r5
 8002b1a:	10a4      	asrs	r4, r4, #2
 8002b1c:	2600      	movs	r6, #0
 8002b1e:	42a6      	cmp	r6, r4
 8002b20:	d105      	bne.n	8002b2e <__libc_init_array+0x2e>
 8002b22:	bd70      	pop	{r4, r5, r6, pc}
 8002b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b28:	4798      	blx	r3
 8002b2a:	3601      	adds	r6, #1
 8002b2c:	e7ee      	b.n	8002b0c <__libc_init_array+0xc>
 8002b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b32:	4798      	blx	r3
 8002b34:	3601      	adds	r6, #1
 8002b36:	e7f2      	b.n	8002b1e <__libc_init_array+0x1e>
 8002b38:	08002b90 	.word	0x08002b90
 8002b3c:	08002b90 	.word	0x08002b90
 8002b40:	08002b90 	.word	0x08002b90
 8002b44:	08002b94 	.word	0x08002b94

08002b48 <_init>:
 8002b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b4a:	bf00      	nop
 8002b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b4e:	bc08      	pop	{r3}
 8002b50:	469e      	mov	lr, r3
 8002b52:	4770      	bx	lr

08002b54 <_fini>:
 8002b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b56:	bf00      	nop
 8002b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b5a:	bc08      	pop	{r3}
 8002b5c:	469e      	mov	lr, r3
 8002b5e:	4770      	bx	lr
